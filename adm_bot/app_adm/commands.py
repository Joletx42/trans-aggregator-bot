import asyncio
import logging
import os

from cryptography.fernet import Fernet

from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile
from aiogram import Router
from aiogram.fsm.context import FSMContext

from app import support as e_sup
from app import user_messages as e_um
from app.database import requests as e_rq

import app_adm.states as st
import app_adm.keyboards as kb
import app_adm.database_adm.requests as rq
import app_adm.support as sup

command_router = Router()

logger = logging.getLogger(__name__)


@command_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ª–æ–≥–∏—Ä—É–µ—Ç –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)
        await sup.handler_user_state(user_id, message, state)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_start>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_user_info"))
async def cmd_get_user_info(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_user_info
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.User_State.user_tg_id_user_info)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_get_user_info>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("block_user"))
async def cmd_block_user(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /block_user
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.User_State.user_tg_id_block_user)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_block_user>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("unblock_user"))
async def cmd_unblock_user(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unblock_user
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        user_role = await e_rq.check_role(user_id)

        if user_role in [3, 4]:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.User_State.user_tg_id_unblock_user)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_unblock_user>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("download_table"))
async def cmd_download_table(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /download_table
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        adm_status_id = await rq.get_admin_status(user_id)
        if adm_status_id == 2:
            return

        user_id = int(user_id)
        user = await e_rq.get_user_by_tg_id(user_id)

        if user.role_id in [3, 4]:
            keyboard = kb.tables_list_for_operator_admin_buttons
        else:
            keyboard = kb.tables_list_for_main_admin_buttons

        msg = await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞–±–ª–∏—Ü—É:", reply_markup=keyboard)
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.Table_Name.table_name)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_download_table>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_user_messages"))
async def cmd_get_user_messages(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_user_messages
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.User_State.user_tg_id_get_messages)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_get_user_messages>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("set_promo_code"))
async def cmd_set_promo_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_promo_code
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        msg = await message.answer(
            "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.Promo_Code_State.name_promo_code)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_set_promo_code>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_promo_code"))
async def cmd_get_promo_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_promo_code
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        promo_code_list = await rq.get_promo_codes()
        if promo_code_list:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            promo_codes_message = "\n".join(
                f"üÜî–ù–æ–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞: {code.id}\nüîñ–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: `{code.code}`\nüí∞–ö–æ–ª\\-–≤–æ –±–æ–Ω—É—Å–æ–≤: {code.bonuses}\n"
                for code in promo_code_list
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
            msg = await message.answer(
                promo_codes_message,
                parse_mode="MarkdownV2",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_get_promo_code>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("set_new_admin"))
async def cmd_set_new_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_new_admin
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        # user_role = await e_rq.check_role(user_id)

        # if user_role in [3, 4]:
        #     msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        #     await e_rq.set_message(user_id, msg.message_id, msg.text)
        # else:
        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.Reg_Admin.tg_id_admin)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_set_new_admin>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("set_new_driver_admin"))
async def cmd_set_new_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_new_driver_admin
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        # user_role = await e_rq.check_role(user_id)

        # if user_role in [3, 4]:
        #     msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        #     await e_rq.set_message(user_id, msg.message_id, msg.text)
        # else:
        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.User_State.user_tg_id_set_driver_admin)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_set_new_driver_admin>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_id"))
async def cmd_get_id(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_id
    """
    user_id = message.from_user.id
    try:
        await message.delete()
        msg = await message.answer(
            f"ü§ñ–ü—Ä–∏–≤–µ—Ç\\!\n–í–æ—Ç —Ç–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º\\-üÜî: `{user_id}`\n\\(–ù–∞–∂–º–∏ –Ω–∞ ID, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\\)\n\n–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è\\!üòá",
            parse_mode="MarkdownV2",
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <cmd_get_id>")


@command_router.message(Command("delete_messages_in_user_chat"))
async def cmd_delete_messages_in_user_chat(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_messages_in_user_chat
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        user_role = await e_rq.check_role(user_id)

        if user_role in [3, 4]:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.User_State.user_tg_id_delete_messages)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_delete_messages_in_user_chat>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("driver_info_change"))
async def cmd_driver_info_change(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /driver_info_change
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        # user_role = await e_rq.check_role(user_id)

        # if user_role in [3, 4]:
        #     msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        #     await e_rq.set_message(user_id, msg.message_id, msg.text)
        # else:
        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.User_State.driver_tg_id_for_set_status_is_deleted)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_driver_info_change>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_key"))
async def cmd_get_key(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_key.

    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (—Ç–æ–ª—å–∫–æ –¥–ª—è role_id == 3).
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        role_id = await e_rq.check_role(user_id)
        if role_id in [3, 4, 5]:
            valid_key = await e_rq.get_secret_key()
            msg = await message.answer(f"`{valid_key}`", parse_mode="MarkdownV2")
            logger.info(f"–ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} <cmd_get_key>")

            await asyncio.sleep(10)
            try:
                await message.bot.delete_message(
                    chat_id=user_id, message_id=msg.message_id
                )
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º {msg.message_id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <cmd_get_key>"
                )
            except Exception as delete_error:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {delete_error} <cmd_get_key>"
                )
        else:
            msg = await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} <cmd_get_key>"
            )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <cmd_get_key>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("generate_key"))
async def cmd_generate_key(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /generate_key.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        role_id = await e_rq.check_role(user_id)
        if role_id in [3, 4, 5]:
            valid_key = Fernet.generate_key()
            msg = await message.answer(f"{valid_key.decode()}")
            logger.info(
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ê–¥–º–∏–Ω—É {user_id} <cmd_generate_key>"
            )

            await asyncio.sleep(10)
            try:
                await message.bot.delete_message(
                    chat_id=user_id, message_id=msg.message_id
                )
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º {msg.message_id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <cmd_generate_key>"
                )
            except Exception as delete_error:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {delete_error} <cmd_generate_key>"
                )
        else:
            msg = await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} <cmd_generate_key>"
            )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <cmd_generate_key>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("change_wallet"))
async def cmd_change_wallet(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_wallet
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        # user_role = await e_rq.check_role(user_id)

        # if user_role in [3, 4]:
        #     msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        #     await e_rq.set_message(user_id, msg.message_id, msg.text)
        # else:
        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.User_State.user_tg_id_change_wallet)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_change_wallet>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("change_pswrd"))
async def cmd_change_pswrd(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_pswrd
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø–∞—Ä–æ–ª—å):",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.set_state(st.Change_PSWRD.old_pswrd)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_change_pswrd>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("soft_delete_account"))
async def cmd_soft_delete_account(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /soft_delete_account
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        user_role = await e_rq.check_role(user_id)

        if user_role in [3, 4]:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Delete_Account.soft_delete_account)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_soft_delete_account>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


# @command_router.message(Command("delete_all_messages_from_db"))
# async def cmd_delete_all_messages_from_db(message: Message, state: FSMContext):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_all_messages_from_db
#     """
#     user_id = message.from_user.id
#     user_exists = await sup.origin_check_user(user_id, message, state)
#     if not user_exists:
#         return
#     try:
#         await e_rq.set_message(user_id, message.message_id, message.text)
#         await e_sup.delete_messages_from_chat(user_id, message)

#         user_role = await e_rq.check_role(user_id)

#         if user_role in [3, 4]:
#             msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
#             await e_rq.set_message(user_id, msg.message_id, msg.text)
#         else:
#             await rq.delete_all_messages_from_db(user_id)

#     except Exception as e:
#         logger.exception(
#             f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_delete_all_messages_from_db>"
#         )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
#         await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("full_delete_account"))
async def cmd_full_delete_account(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /full_delete_account
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        user_role = await e_rq.check_role(user_id)

        if user_role in [3, 4]:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Delete_Account.full_delete_account)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_full_delete_account>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("send_message"))
async def cmd_all_send_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_message
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        user_role = await e_rq.check_role(user_id)

        if user_role in [3, 4]:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb.who_send_message_button
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_send_message>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("delete_promo_code"))
async def cmd_delete_promo_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_promo_code
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        user_role = await e_rq.check_role(user_id)

        if user_role in [3, 4]:
            msg = await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Promo_Code_State.name_promo_code_for_deletion)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_delete_promo_code>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_active_drivers"))
async def cmd_get_active_drivers(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_active_drivers
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        drivers_message = '–í–æ–¥–∏—Ç–µ–ª–∏ "–Ω–∞ –ª–∏–Ω–∏–∏":\n\n'

        users_drivers_list = await rq.get_active_drivers()
        if users_drivers_list:
            encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <cmd_get_active_drivers>"
                )
                await e_sup.send_message(message, user_id, e_um.common_error_message())
                return

            drivers_message += "\n".join(
                f"üë§–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è: `{user.name}`\nüë§Username: `{user.username}`\nüÜî–¢–µ–ª–µ–≥—Ä–∞–º–º\\-ID –≤–æ–¥–∏—Ç–µ–ª—è: `{user.tg_id}`\nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{e_sup.decrypt_data(user.contact, encryption_key)}`"
                for user, driver in users_drivers_list
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
            msg = await message.answer(
                drivers_message,
                parse_mode="MarkdownV2",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_get_active_drivers>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_all_drivers"))
async def cmd_get_all_drivers(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_all_drivers
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
        if not encryption_key:
            logger.error(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <cmd_get_all_drivers>"
            )
            await e_sup.send_message(message, user_id, e_um.common_error_message())
            return

        users_drivers_list = await rq.get_all_drivers()
        if users_drivers_list:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
            drivers_lines = []
            for user, driver in users_drivers_list:
                status_name = await e_rq.get_status_name_by_status_id(driver.status_id)
                line = (
                    f"üë§–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è: `{user.name}`\n"
                    f"üë§Username: `{user.username}`\n"
                    f"üí•–°—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è: `{status_name}`\n"
                    f"üÜî–¢–µ–ª–µ–≥—Ä–∞–º–º\\-ID –≤–æ–¥–∏—Ç–µ–ª—è: `{user.tg_id}`\n"
                    f"üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{e_sup.decrypt_data(user.contact, encryption_key)}`"
                )
                drivers_lines.append(line)

            drivers_message = "\n".join(drivers_lines)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
            msg = await message.answer(
                drivers_message,
                parse_mode="MarkdownV2",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <cmd_get_all_drivers>"
        )  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
        await e_sup.send_message(message, user_id, e_um.common_error_message())

@command_router.message(Command("get_doc_hash"))
async def cmd_get_doc_hash(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_doc_hash.
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        role_id = await e_rq.check_role(user_id)
        if role_id in [3, 4, 5]:
            hash_doc = e_sup.hash_doc()
            msg = await message.answer(hash_doc)
            logger.info(
                f"–•–µ—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ê–¥–º–∏–Ω—É {user_id} <get_doc_hash>"
            )

            await asyncio.sleep(10)
            try:
                await message.bot.delete_message(
                    chat_id=user_id, message_id=msg.message_id
                )
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–µ—à–µ–º {msg.message_id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <get_doc_hash>"
                )
            except Exception as delete_error:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {delete_error} <get_doc_hash>"
                )
        else:
            msg = await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} <get_doc_hash>"
            )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <get_doc_hash>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@command_router.message(Command("get_doc_pp"))
async def cmd_get_doc_pp(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_doc_pp.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ü–î".
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        role_id = await e_rq.check_role(user_id)
        if role_id in [3, 4, 5]:
            base_dir = os.getcwd()
            file_path = os.path.join(base_dir, "privacy_policy", "privacy_policy.pdf")

            document = FSInputFile(file_path)
            msg = await message.bot.send_document(chat_id=user_id, document=document)

            await e_rq.set_message(user_id, msg.message_id, "privacy_policy.pdf")
            logger.info(
                f"–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ê–¥–º–∏–Ω—É {user_id} <cmd_get_doc_pp>"
            )
        else:
            msg = await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} <cmd_get_doc_pp>"
            )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <cmd_get_doc_pp>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())