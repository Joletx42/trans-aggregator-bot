import logging
import asyncio
import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app import support as e_sup
from app.database import requests as e_rq
from app import user_messages as e_um

import app_adm.states as st
import app_adm.database_adm.requests as rq
import app_adm.keyboards as kb
import app_adm.support as sup

handlers_router = Router()

logger = logging.getLogger(__name__)


@handlers_router.callback_query(F.data == "reject")
async def handler_reject(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
    """
    user_id = callback.from_user.id
    user_exists = await sup.origin_check_user(user_id, callback.message, state)
    if not user_exists:
        return
    try:
        await sup.handler_user_state(user_id, callback.message, state)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_admin_id>")
        await callback.answer(e_um.common_error_message(), show_alert=True)


@handlers_router.message(st.Admin_ID.admin_id)
async def handler_admin_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id
    try:
        await e_rq.set_message(user_id, message.message_id, message.text)

        if await rq.check_adm_pswrd(user_id, message.text):
            await rq.set_status_admin(user_id, 1)
            await sup.handler_user_state(user_id, message, state)
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.")
        else:
            await e_sup.delete_messages_from_chat(user_id, message)
            msg = await message.answer(
                "–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π.\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.warning(f"–ê–¥–º–∏–Ω {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á {message.text}.")
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_admin_id>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.user_tg_id_user_info)
async def handler_user_tg_id_user_info(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        if await e_rq.check_user(user_tg_id):
            user = await e_rq.get_user_by_tg_id(user_tg_id)
            adm = await e_rq.get_user_by_tg_id(user_id)
            if adm.role_id in [3, 4]:
                if user.role_id in [3, 4, 5, 6]:
                    msg = await message.answer(
                        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                        reply_markup=kb.reject_button,
                    )
                    await e_rq.set_message(user_id, msg.message_id, msg.text)
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –ê–¥–º–∏–Ω–µ {user.tg_id} –ê–¥–º–∏–Ω–æ–º {user_id} <handler_user_tg_id_user_info>"
                    )
                    return

            await sup.get_user_info(user_tg_id, message)

            logger.info(f"–ê–¥–º–∏–Ω {user_id} –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_tg_id}")

            await state.clear()
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_user_info>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.user_tg_id_block_user)
async def handler_user_tg_id_block_user(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        if await e_rq.check_user(user_tg_id):
            user = await e_rq.get_user_by_tg_id(user_tg_id)
            adm = await e_rq.get_user_by_tg_id(user_id)
            if adm.role_id in [3, 4]:
                if user.role_id in [3, 4, 5, 6]:
                    msg = await message.answer(
                        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                        reply_markup=kb.reject_button,
                    )
                    await e_rq.set_message(user_id, msg.message_id, msg.text)
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ê–¥–º–∏–Ω–∞ {user.tg_id} –ê–¥–º–∏–Ω–æ–º {user_id}"
                    )
                    return
            elif user.role_id == 6:
                msg = await message.answer(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
                return
            elif user_id == user_tg_id:
                msg = await message.answer(
                    "–°–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
                return

            await rq.set_user_role(user_tg_id, user_id, 6)
            await e_sup.delete_messages_from_chat(user_tg_id, message)

            msg = await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            logger.info(f"–ê–¥–º–∏–Ω {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")

            await state.clear()
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_block_user>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.user_tg_id_unblock_user)
async def handler_user_tg_id_unblock_user(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        if await e_rq.check_user(user_tg_id):
            user = await e_rq.get_user_by_tg_id(user_tg_id)

            if user.role_id == 6:
                await rq.set_user_role(user_tg_id, user_id, 1)
                await e_sup.delete_messages_from_chat(user_tg_id, message)

                msg = await message.answer(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
                logger.info(f"–ê–¥–º–∏–Ω {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")
            else:
                msg = await message.answer(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
                logger.info(f"–ê–¥–º–∏–Ω {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_unblock_user>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Table_Name.table_name)
async def handler_table_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_id = int(user_id)
        table_name = message.text
        await e_rq.set_message(user_id, message.message_id, table_name)

        if table_name == "–û—Ç–º–µ–Ω–∞üö´":
            await state.clear()
            await sup.handler_user_state(user_id, message, state)
        else:
            await e_sup.delete_messages_from_chat(user_id, message)

            user = await e_rq.get_user_by_tg_id(user_id)

            if user.role_id in [3, 4]:
                valid_table_names = {
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "–ö–ª–∏–µ–Ω—Ç—ã",
                    "–í–æ–¥–∏—Ç–µ–ª–∏",
                    "–ü—Ä–æ–º–æ–∫–æ–¥—ã",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ_–ø—Ä–æ–º–æ–∫–æ–¥—ã",
                    "–û—Ç–∑—ã–≤—ã",
                    "–ó–∞–∫–∞–∑—ã",
                    "–¢–µ–∫—É—â–∏–µ_–∑–∞–∫–∞–∑—ã",
                    "–ò—Å—Ç–æ—Ä–∏–∏_–∑–∞–∫–∞–∑–æ–≤",
                    "–°—Ç–∞—Ç—É—Å—ã",
                    "–¢–∏–ø—ã_–ø–æ–µ–∑–¥–æ–∫",
                    "–†–æ–ª–∏",
                    "–ö–ª—é—á–∏",
                }
            else:
                valid_table_names = {
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                    "–ö–ª–∏–µ–Ω—Ç—ã",
                    "–í–æ–¥–∏—Ç–µ–ª–∏",
                    "–°–æ–æ–±—â–µ–Ω–∏—è",
                    "–ü—Ä–æ–º–æ–∫–æ–¥—ã",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ_–ø—Ä–æ–º–æ–∫–æ–¥—ã",
                    "–û—Ç–∑—ã–≤—ã",
                    "–ó–∞–∫–∞–∑—ã",
                    "–¢–µ–∫—É—â–∏–µ_–∑–∞–∫–∞–∑—ã",
                    "–ò—Å—Ç–æ—Ä–∏–∏_–∑–∞–∫–∞–∑–æ–≤",
                    "–°—Ç–∞—Ç—É—Å—ã",
                    "–¢–∏–ø—ã_–ø–æ–µ–∑–¥–æ–∫",
                    "–†–æ–ª–∏",
                    "–ö–ª—é—á–∏",
                }

            if table_name in valid_table_names:
                df = await rq.get_table_as_dataframe(table_name, user_id, user.role_id)
                if df.empty:
                    msg = await message.bot.send_message(user_id, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                    await e_rq.set_message(user_id, msg.message_id, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                    return

                file_path = f"{table_name}.xlsx"
                df.to_excel(file_path, index=False)

                await sup.get_document(user_id, message, file_path)
            else:
                msg = await message.answer("–¢–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await e_rq.set_message(user_id, msg.message_id, msg.text)
                await asyncio.sleep(4)

                await sup.handler_user_state(user_id, message, state)
                return

            logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–∫–∞—á–∞–ª —Ç–∞–±–ª–∏—Ü—É {table_name}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_table_name>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())
    finally:
        await state.clear()


@handlers_router.message(st.User_State.user_tg_id_get_messages)
async def handler_user_tg_id_get_messages(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        if await e_rq.check_user(user_tg_id):
            user = await e_rq.get_user_by_tg_id(user_tg_id)
            adm = await e_rq.get_user_by_tg_id(user_id)
            if adm.role_id in [3, 4]:
                if user.role_id in [3, 4, 5, 6]:
                    msg = await message.answer(
                        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                        reply_markup=kb.reject_button,
                    )
                    await e_rq.set_message(user_id, msg.message_id, msg.text)
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –°–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –ê–¥–º–∏–Ω–∞ {user.tg_id} –ê–¥–º–∏–Ω–æ–º {user_id}"
                    )
                    return

            df = await rq.get_message_from_user(user_tg_id, user_id)
            if df.empty:
                msg = await message.bot.send_message(user_id, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                await e_rq.set_message(user_id, msg.message_id, "–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
                return

            file_path = "–°–æ–æ–±—â–µ–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.xlsx"
            df.to_excel(file_path, index=False)

            await sup.get_document(user_id, message, "–°–æ–æ–±—â–µ–Ω–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.xlsx")

            await state.clear()
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_get_messages>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Promo_Code_State.name_promo_code)
async def handler_name_promo_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        name_promo_code = message.text
        await e_rq.set_message(user_id, message.message_id, name_promo_code)

        list_names_promo_codes = await e_rq.get_all_promo_codes(user_id)
        if name_promo_code in [list_names_promo_codes]:
            msg = await message.answer(
                "–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            await state.update_data(name_promo_code=name_promo_code)

            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Promo_Code_State.bonuses)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_name_promo_code>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Promo_Code_State.bonuses)
async def handler_bonuses(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –±–æ–Ω—É—Å–æ–≤
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        bonuses = message.text
        await e_rq.set_message(user_id, message.message_id, bonuses)

        if bonuses.isdigit():
            await e_sup.delete_messages_from_chat(user_id, message)
            bonuses = int(bonuses)

            data = await state.get_data()
            name_promo_code = data.get("name_promo_code")

            await rq.set_promo_code(name_promo_code, bonuses)

            msg = await message.answer("–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            logger.info(f"–ê–¥–º–∏–Ω {user_id} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ {name_promo_code}")

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_bonuses>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.callback_query(F.data == "finish_work")
async def handler_finish_work(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∞
    """
    user_id = callback.from_user.id
    user_exists = await sup.origin_check_user(user_id, callback.message, state)
    if not user_exists:
        return
    try:
        await rq.set_status_admin(user_id, 2)
        await callback.answer(
            text="–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
            show_alert=True,
        )
        await e_sup.delete_messages_from_chat(user_id, callback.message)
        logger.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ–π —Å–µ–∞–Ω—Å!")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_finish_work>")
        await callback.answer(e_um.common_error_message(), show_alert=True)


@handlers_router.message(st.Reg_Admin.tg_id_admin)
async def handler_tg_id_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º–º ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        if message.text.isdigit():
            new_admin_tg_id = message.text
            new_admin_tg_id = int(new_admin_tg_id)

            role_id = await e_rq.check_role(new_admin_tg_id)
            if role_id == 6:
                msg = await message.answer(
                    "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
            elif role_id in [3, 4, 5]:
                msg = await message.answer(
                    "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
            else:
                await e_rq.set_message(user_id, message.message_id, message.text)

                await state.update_data(tg_id_admin=new_admin_tg_id)

                msg = await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ username:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)

                await state.set_state(st.Reg_Admin.username_admin)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_tg_id_admin>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Reg_Admin.username_admin)
async def handler_username_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        if message.text:
            new_admin_username = message.text
            await e_rq.set_message(user_id, message.message_id, message.text)

            await state.update_data(username_admin=new_admin_username)

            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Reg_Admin.name_admin)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ username:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_username_admin>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Reg_Admin.name_admin)
async def handler_name_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–º–µ–Ω–∏ –∏ –§–∞–º–∏–ª–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        if message.text:
            new_admin_name = message.text
            await e_rq.set_message(user_id, message.message_id, message.text)

            await state.update_data(name_admin=new_admin_name)

            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç (—Ñ–æ—Ä–º–∞—Ç: +70000000000):",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Reg_Admin.contact_admin)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_name_admin>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Reg_Admin.contact_admin)
async def handler_contact_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        if message.text and e_sup.is_valid_phone(message.text):
            new_admin_contact = message.text
            await e_rq.set_message(user_id, message.message_id, message.text)

            await state.update_data(contact_admin=new_admin_contact)

            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø–∞—Ä–æ–ª—å) –ê–¥–º–∏–Ω–∞:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Reg_Admin.adm_id)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç (—Ñ–æ—Ä–º–∞—Ç: +70000000000):",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_contact_admin>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Reg_Admin.adm_id)
async def handler_adm_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        if message.text:
            admin_adm_id = message.text
            await e_rq.set_message(user_id, message.message_id, message.text)

            encryption_key = os.getenv("PSWRD_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PSWRD_ENCRYPTION_KEY) <handler_adm_id>"
                )
                return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

            encrypted_password = e_sup.encrypt_data(admin_adm_id, encryption_key)

            data = await state.get_data()
            admin_tg_id = data.get("tg_id_admin")
            admin_username = data.get("username_admin")
            admin_name = data.get("name_admin")
            admin_contact = data.get("contact_admin")

            encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.<handler_adm_id>"
                )
                return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

            encrypted_contact = e_sup.encrypt_data(admin_contact, encryption_key)

            await rq.set_new_admin(
                admin_tg_id,
                admin_username,
                admin_name,
                encrypted_contact,
                4,
                2,
                encrypted_password,
            )

            msg = await message.answer(
                f"–ù–æ–≤—ã–π –∞–¥–º–∏–Ω {admin_tg_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(f"–ù–æ–≤—ã–π –∞–¥–º–∏–Ω {admin_tg_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–¥–º–∏–Ω—É {user_id}!")

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ê–¥–º–∏–Ω–∞:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_adm_id>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.user_tg_id_delete_messages)
async def handler_user_tg_id_delete_messages(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        if await e_rq.check_user(user_tg_id):
            user = await e_rq.get_user_by_tg_id(user_tg_id)
            adm = await e_rq.get_user_by_tg_id(user_id)
            if adm.role_id in [3, 4]:
                if user.role_id in [3, 4, 5, 6]:
                    msg = await message.answer(
                        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                        reply_markup=kb.reject_button,
                    )
                    await e_rq.set_message(user_id, msg.message_id, msg.text)
                    logger.warning(
                        f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –¥—Ä—É–≥–æ–≥–æ –ê–¥–º–∏–Ω–∞ {user.tg_id} –ê–¥–º–∏–Ω–æ–º {user_id}"
                    )
                    return

            result = await e_sup.delete_messages_from_chat(user_tg_id, message, True)

            if result:
                text = f"–°–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
                logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")
            else:
                text = f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"

            msg = await message.answer(text)
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_delete_messages>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.driver_tg_id_for_set_status_is_deleted)
async def handler_driver_tg_id_for_set_status_is_deleted(
    message: Message, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        driver_tg_id = message.text
    
        await e_rq.set_message(user_id, message.message_id, driver_tg_id)
        await e_sup.delete_messages_from_chat(user_id, message)

        driver_tg_id = int(driver_tg_id)

        driver_exist = await rq.check_driver(driver_tg_id)
        if driver_exist:
            await rq.set_driver_status_deleted(driver_tg_id)
            logger.info(
                f'–ê–¥–º–∏–Ω {user_id}: –í–æ–¥–∏—Ç–µ–ª—é {driver_tg_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å "–£–¥–∞–ª–µ–Ω" (is_deleted = True) –ê–¥–º–∏–Ω–æ–º {user_id} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É –≤–æ–¥–∏—Ç–µ–ª—è.'
            )
            msg = await message.answer(
                f"–í–æ–¥–∏—Ç–µ–ª—é {driver_tg_id} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_driver_tg_id_for_set_status_is_deleted>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.user_tg_id_set_driver_admin)
async def handler_user_tg_id_set_driver_admin(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –°—Ç–∞–¥–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text

        await e_rq.set_message(user_id, message.message_id, user_tg_id)
        await e_sup.delete_messages_from_chat(user_id, message)

        user_tg_id = int(user_tg_id)

        role_id = await e_rq.check_role(user_tg_id)
        if role_id in [3, 4, 5]:
            msg = await message.answer(
                "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            user_exist = await e_rq.check_user(user_tg_id)
            if user_exist:
                await state.update_data(tg_id_admin=user_tg_id)
                msg = await message.answer(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –í–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)

                await state.set_state(st.Reg_Admin.driver_adm_id)
            else:
                msg = await message.answer(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_set_driver_admin>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Reg_Admin.driver_adm_id)
async def handler_driver_adm_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –°—Ç–∞–¥–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        if message.text:
            admin_adm_id = message.text
            await e_rq.set_message(user_id, message.message_id, message.text)

            encryption_key = os.getenv("PSWRD_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PSWRD_ENCRYPTION_KEY) <handler_adm_id>"
                )
                return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

            encrypted_password = e_sup.encrypt_data(admin_adm_id, encryption_key)

            data = await state.get_data()
            admin_tg_id = data.get("tg_id_admin")

            user = await e_rq.get_user_by_tg_id(admin_tg_id)

            await rq.set_new_admin(
                admin_tg_id,
                user.username,
                user.name,
                user.contact,
                3,
                2,
                encrypted_password,
            )

            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin_tg_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å "–í–æ–¥–∏—Ç–µ–ª—å/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" –ê–¥–º–∏–Ω–æ–º {user_id}.'
            )
            msg = await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_tg_id} —Ç–µ–ø–µ—Ä—å –í–æ–¥–∏—Ç–µ–ª—å/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –í–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_driver_adm_id>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_State.user_tg_id_change_wallet)
async def handler_user_tg_id_change_wallet(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        user_tg_id = int(user_tg_id)
        if await e_rq.check_user(user_tg_id):
            role_id = await e_rq.check_role(user_tg_id)
            if role_id == 1:
                await state.clear()
                client_id = await e_rq.get_client(user_tg_id)
                if client_id is None:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_user_tg_id_change_wallet>"
                    )
                    return

                client = await e_rq.get_client_object(client_id)
                if client is None:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_user_tg_id_change_wallet>"
                    )
                    return

                text = (
                    f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞ {user_tg_id}: {client.bonuses}"
                )
                keyboard = await kb.get_change_wallet_button(role_id)
                await state.update_data(client_id=client_id)
            elif role_id in [2, 3]:
                await state.clear()
                driver_id = await e_rq.get_driver(user_tg_id)
                if driver_id is None:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_user_tg_id_change_wallet>"
                    )
                    return

                driver = await e_rq.get_driver_object(driver_id)
                if driver is None:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_user_tg_id_change_wallet>"
                    )
                    return

                text = f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç —É –≤–æ–¥–∏—Ç–µ–ª—è {user_tg_id}: {driver.wallet}"
                keyboard = await kb.get_change_wallet_button(role_id)
                await state.update_data(driver_id=driver_id)
            else:
                msg = await message.answer(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                    reply_markup=kb.reject_button,
                )
                await e_rq.set_message(user_id, msg.message_id, msg.text)
                return

            msg = await message.answer(
                text,
                reply_markup=keyboard,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_user_tg_id_change_wallet>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.callback_query(F.data.startswith("bonuses_"))
async def handler_change_bonuses(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞
    """
    user_id = callback.from_user.id
    user_exists = await sup.origin_check_user(user_id, callback.message, state)
    if not user_exists:
        return
    try:
        await e_sup.delete_messages_from_chat(user_id, callback.message)

        msg = await callback.message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        func = callback.data.split("_")[-1]
        if func == "increase":
            await state.set_state(st.User_Wallet.increase_client_bonuses)
        else:
            await state.set_state(st.User_Wallet.reduce_client_bonuses)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_change_bonuses>")
        await callback.answer(e_um.common_error_message(), show_alert=True)


@handlers_router.message(st.User_Wallet.increase_client_bonuses)
async def handler_increase_client_bonuses(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        bonuses = message.text
        await e_rq.set_message(user_id, message.message_id, bonuses)

        if bonuses.isdigit():
            bonuses = int(bonuses)
            data = await state.get_data()
            client_id = data.get("client_id")

            client = await e_rq.get_client_object(client_id)
            if client is None:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_increase_client_bonuses>"
                )
                return

            await e_sup.delete_messages_from_chat(user_id, message)
            await e_rq.form_new_number_bonuses(client_id, bonuses, 0, True)

            msg = await message.answer(
                f"–ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ {bonuses}!"
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(5)

            logger.info(
                f"–ê–¥–º–∏–Ω {user_id} —É–≤–µ–ª–∏—á–∏–ª –∫–ª–∏–µ–Ω—Ç—É {client_id} –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ {bonuses}."
            )

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_increase_client_bonuses>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_Wallet.reduce_client_bonuses)
async def handler_reduce_client_bonuses(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        bonuses = message.text
        await e_rq.set_message(user_id, message.message_id, bonuses)

        if bonuses.isdigit():
            bonuses = int(bonuses)
            data = await state.get_data()
            client_id = data.get("client_id")

            client = await e_rq.get_client_object(client_id)
            if client is None:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_reduce_client_bonuses>"
                )
                return

            await e_sup.delete_messages_from_chat(user_id, message)
            await e_rq.form_new_number_bonuses(client_id, bonuses, 0, False)

            msg = await message.answer(
                f"–ö–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ {bonuses}!"
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(5)

            logger.info(
                f"–ê–¥–º–∏–Ω {user_id} —É–º–µ–Ω—å—à–∏–ª –∫–ª–∏–µ–Ω—Ç—É {client_id} –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ {bonuses}."
            )

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_reduce_client_bonuses>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.callback_query(F.data.startswith("coins_"))
async def handler_change_coins(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç —É –≤–æ–¥–∏—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    user_exists = await sup.origin_check_user(user_id, callback.message, state)
    if not user_exists:
        return
    try:
        await e_sup.delete_messages_from_chat(user_id, callback.message)

        msg = await callback.message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        func = callback.data.split("_")[-1]
        if func == "increase":
            await state.set_state(st.User_Wallet.increase_driver_coins)
        else:
            await state.set_state(st.User_Wallet.reduce_driver_coins)
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <async def handler_change_coins>"
        )
        await callback.answer(e_um.common_error_message(), show_alert=True)


@handlers_router.message(st.User_Wallet.increase_driver_coins)
async def handler_increase_driver_coins(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç —É –≤–æ–¥–∏—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        coins = message.text
        await e_rq.set_message(user_id, message.message_id, coins)

        if coins.isdigit():
            coins = int(coins)
            data = await state.get_data()
            driver_id = data.get("driver_id")

            driver = await e_rq.get_driver_object(driver_id)
            if driver is None:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_increase_driver_coins>"
                )
                return

            await e_sup.delete_messages_from_chat(user_id, message)
            await e_rq.form_new_drivers_wallet(driver_id, coins, True)

            msg = await message.answer(
                f"–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ {coins}!"
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(5)

            logger.info(
                f"–ê–¥–º–∏–Ω {user_id} —É–≤–µ–ª–∏—á–∏–ª –≤–æ–¥–∏—Ç–µ–ª—é {driver_id} –∫–æ–ª-–≤–æ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ {coins}."
            )

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_increase_driver_coins>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.User_Wallet.reduce_driver_coins)
async def handler_reduce_driver_coins(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç —É –≤–æ–¥–∏—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        coins = message.text
        await e_rq.set_message(user_id, message.message_id, coins)

        if coins.isdigit():
            coins = int(coins)
            data = await state.get_data()
            driver_id = data.get("driver_id")

            driver = await e_rq.get_driver_object(driver_id)
            if driver is None:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id} <handler_increase_driver_coins>"
                )
                return

            await e_sup.delete_messages_from_chat(user_id, message)
            await e_rq.form_new_drivers_wallet(driver_id, coins, False)

            msg = await message.answer(
                f"–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ {coins}!"
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await asyncio.sleep(5)

            logger.info(
                f"–ê–¥–º–∏–Ω {user_id} —É–º–µ–Ω—å—à–∏–ª –≤–æ–¥–∏—Ç–µ–ª—é {driver_id} –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ {coins}."
            )

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç:")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_reduce_driver_coins>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Delete_Account.soft_delete_account)
async def handler_soft_delete_account(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "–º—è–≥–∫–æ–≥–æ" —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        user_tg_id = int(user_tg_id)
        if await e_rq.check_user(user_tg_id):
            if user_id == user_tg_id:
                text = f'–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî!\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ "–º—è–≥–∫–æ" —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'
            else:
                text = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ "–º—è–≥–∫–æ" —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}?'

            msg = await message.answer(
                text=text,
                reply_markup=kb.confirm_delete_account,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.update_data(user_tg_id=user_tg_id)
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handler_soft_delete_account –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e}"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.callback_query(F.data == "confirm_soft_delete_account")
async def handler_confirm_soft_delete_account(
    callback: CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ "–º—è–≥–∫–æ–≥–æ" —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    user_id = callback.from_user.id
    user_exists = await sup.origin_check_user(user_id, callback.message, state)
    if not user_exists:
        return

    try:
        data = await state.get_data()
        user_tg_id = data.get("user_tg_id")

        await e_sup.delete_messages_from_chat(user_id, callback.message)
        await e_sup.delete_messages_from_chat(user_tg_id, callback.message)

        await e_rq.soft_delete_user(user_tg_id, callback.message)
        msg = await callback.message.answer(
            f'–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id} —É—Å–ø–µ—à–Ω–æ "–º—è–≥–∫–æ" —É–¥–∞–ª–µ–Ω!'
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)
        logger.info(f'–ê–¥–º–∏–Ω {user_id} —É—Å–ø–µ—à–Ω–æ "–º—è–≥–∫–æ" —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}')

        await asyncio.sleep(4)

        await sup.handler_user_state(user_id, callback.message, state)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handler_confirm_soft_delete_account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer(e_um.common_error_message(), show_alert=True)
    finally:
        await state.clear()


@handlers_router.message(st.Delete_Account.full_delete_account)
async def handler_full_delete_account(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return

    try:
        user_tg_id = message.text
        await e_rq.set_message(user_id, message.message_id, user_tg_id)

        await e_sup.delete_messages_from_chat(user_id, message)

        user_tg_id = int(user_tg_id)
        if await e_rq.check_user(user_tg_id, True):
            if user_id == user_tg_id:
                text = f"–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî!\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?"
            else:
                text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_tg_id}?"

            msg = await message.answer(
                text=text,
                reply_markup=kb.confirm_full_delete_account,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.update_data(user_tg_id=user_tg_id)
        else:
            msg = await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –¢–µ–ª–µ–≥—Ä–∞–º–º-üÜî:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handler_full_delete_account –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e}"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.callback_query(F.data == "confirm_full_delete_account")
async def handler_confirm_full_delete_account(
    callback: CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    user_exists = await sup.origin_check_user(user_id, callback.message, state)
    if not user_exists:
        return

    try:
        data = await state.get_data()
        user_tg_id = data.get("user_tg_id")

        await e_sup.delete_messages_from_chat(user_id, callback.message)

        await rq.full_delete_account(user_tg_id)
        msg = await callback.message.answer(
            f"–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!"
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)
        logger.info(
            f"–ê–¥–º–∏–Ω {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_tg_id}"
        )

        await asyncio.sleep(4)

        await sup.handler_user_state(user_id, callback.message, state)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handler_confirm_full_delete_account –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer(e_um.common_error_message(), show_alert=True)
    finally:
        await state.clear()


@handlers_router.message(st.Promo_Code_State.name_promo_code_for_deletion)
async def handler_name_promo_code_for_deletion(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        name_promo_code = message.text
        await e_rq.set_message(user_id, message.message_id, name_promo_code)
        list_names_promo_codes = await e_rq.get_all_promo_codes(user_id)
        if name_promo_code in list_names_promo_codes:
            await rq.delete_promo_code(name_promo_code)

            msg = await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {name_promo_code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {name_promo_code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ê–¥–º–∏–Ω–æ–º {user_id}")

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)
        else:
            msg = await message.answer(
                "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:"
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_name_promo_code_for_deletion>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Change_PSWRD.old_pswrd)
async def handler_old_pswrd(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        old_pswrd = message.text
        await e_rq.set_message(user_id, message.message_id, old_pswrd)

        await e_sup.delete_messages_from_chat(user_id, message)

        if await rq.check_adm_pswrd(
            user_id,
            old_pswrd,
        ):
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å.")
            msg = await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)

            await state.set_state(st.Change_PSWRD.new_pswrd)
        else:
            logger.exception(f"–ê–¥–º–∏–Ω {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å.")
            msg = await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_old_pswrd>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Change_PSWRD.new_pswrd)
async def handler_new_pswrd(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        new_pswrd = message.text
        await e_rq.set_message(user_id, message.message_id, new_pswrd)

        await e_sup.delete_messages_from_chat(user_id, message)

        msg = await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:",
            reply_markup=kb.reject_button,
        )
        await e_rq.set_message(user_id, msg.message_id, msg.text)

        await state.update_data(new_pswrd=new_pswrd)
        await state.set_state(st.Change_PSWRD.confirm_new_pswrd)
    except Exception as e:
        await state.clear()
        logger.exception(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_new_pswrd>")
        await e_sup.send_message(message, user_id, e_um.common_error_message())


@handlers_router.message(st.Change_PSWRD.confirm_new_pswrd)
async def handler_confirm_new_pswrd(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    """
    user_id = message.from_user.id
    user_exists = await sup.origin_check_user(user_id, message, state)
    if not user_exists:
        return
    try:
        new_pswrd_for_confirm = message.text
        await e_rq.set_message(user_id, message.message_id, new_pswrd_for_confirm)

        await e_sup.delete_messages_from_chat(user_id, message)

        data = await state.get_data()
        new_pswrd = data.get("new_pswrd")

        if new_pswrd_for_confirm == new_pswrd:
            await rq.set_new_pswrd(user_id, new_pswrd_for_confirm)

            msg = await message.answer(
                f"–ù–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø–∞—Ä–æ–ª—å) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
            logger.info(f"–ü–∞—Ä–æ–ª—å –ê–¥–º–∏–Ω–∞ {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

            await asyncio.sleep(4)

            await sup.handler_user_state(user_id, message, state)

            await state.clear()
        else:
            msg = await message.answer(
                f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:",
                reply_markup=kb.reject_button,
            )
            await e_rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        await state.clear()
        logger.exception(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <handler_confirm_new_pswrd>"
        )
        await e_sup.send_message(message, user_id, e_um.common_error_message())
