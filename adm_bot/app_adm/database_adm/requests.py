import logging
import os

import pandas as pd

from sqlalchemy import select, delete, not_, asc
from typing import Union, Optional

from app_adm import support as sup

from app.database import requests as e_rq
from app import support as e_sup
from app.database.models import AsyncSessionLocal
from app.database.models import (
    User,
    Client,
    Driver,
    Order,
    Order_history,
    User_message,
    Status,
    Current_Order,
    Feedback,
    Secret_Key,
    User_message,
    Promo_Code,
    Used_Promo_Code,
    Rate,
    Role,
    Admin,
)

logger = logging.getLogger(__name__)


# async def get_adm_key(user_tg_id: int, key: str) -> str:
#     async with AsyncSessionLocal() as session:
#         try:
#             result = await session.execute(
#                 select(Admin).join(User).where(User.tg_id == user_tg_id)
#             )
#             user = result.scalars().first()

#             if user is None:
#                 logger.warning(
#                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {user_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω <get_adm_key>"
#                 )
#                 return ""

#             return user.adm_id
#         except Exception as e:
#             logger.error(
#                 f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID {user_tg_id}: {e} <get_adm_key>"
#             )
#             return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def get_admin_info(admin_id: int) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –ê–¥–º–∏–Ω–µ –ø–æ –µ–≥–æ ID.

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –ê–¥–º–∏–Ω–µ.
        –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ê–¥–º–∏–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    async with AsyncSessionLocal() as session:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ client_id
            admin = await session.scalar(select(Admin).where(Admin.id == admin_id))

            if admin is None:
                logger.warning(f"–ê–¥–º–∏–Ω —Å ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. <get_admin_info>")
                return "–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω."  # –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
            user = await session.scalar(select(User).where(User.id == admin.user_id))

            if user is None:
                logger.warning(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. <get_admin_info>"
                )
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            admin_status = await e_rq.get_status_name_by_status_id(admin.status_id)
            name = e_sup.escape_markdown(user.name)

            encryption_key = os.getenv("PSWRD_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PSWRD_ENCRYPTION_KEY) <handler_old_pswrd>"
                )
                return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

            decrypted_adm_id = e_sup.escape_markdown(e_sup.decrypt_data(admin.adm_id, encryption_key))
            
            admin_info = f"üÜî–¢–µ–ª–µ–≥—Ä–∞–º–ºID: {user.tg_id}\nüí•–°—Ç–∞—Ç—É—Å: {admin_status}\n\nüë§–ò–º—è: {name}\nü™™–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {decrypted_adm_id}"

            return admin_info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è admin_id {admin_id}: {e} <get_admin_info>")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ."


async def get_active_drivers() -> list[tuple[User, Driver]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(
                select(User, Driver)
                .join(User, Driver.user_id == User.id)
                .where(Driver.status_id == 1)
                .order_by(Driver.id.asc())
            )
            users_drivers = result.all()

            return users_drivers  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (User, Driver)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_active_drivers: {e} <get_active_drivers>"
            )
            return []
        
async def get_all_drivers() -> list[tuple[User, Driver]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(
                select(User, Driver)
                .join(User, Driver.user_id == User.id)
                .order_by(Driver.id.asc())
            )
            users_drivers = result.all()

            return users_drivers  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (User, Driver)
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_all_drivers: {e} <get_all_drivers>"
            )
            return []
        
# async def get_status_name_by_status_id(status_id: int) -> str | None:
#     """
#     –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏–º—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –µ–≥–æ status_id.
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ.
#     """
#     async with AsyncSessionLocal() as session:
#         try:
#             result = await session.scalar(
#                 select(Status.status_name).where(Status.id == status_id)
#             )
#             return result  # –ª–∏–±–æ —Å—Ç—Ä–æ–∫–∞, –ª–∏–±–æ None
#         except Exception as e:
#             logger.error(
#                 f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_status_name_by_status_id: {e} <get_status_name_by_status_id>"
#             )
#             return None


async def get_table_as_dataframe(
    table_name: str, adm_id: int, role_id: int
) -> pd.DataFrame:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame.
    """
    async with AsyncSessionLocal() as session:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
            if table_name == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
                if role_id == 5:
                    result = await session.execute(
                        select(User, Client, Driver)
                        .outerjoin(
                            Client, User.id == Client.user_id
                        )  # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                        .outerjoin(
                            Driver, User.id == Driver.user_id
                        )  # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
                        .outerjoin(
                            Admin, User.id == Admin.user_id
                        )  # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        .order_by(asc(User.role_id))
                    )
                else:
                    result = await session.execute(
                        select(User, Client, Driver)
                        .outerjoin(
                            Client, User.id == Client.user_id
                        )  # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                        .outerjoin(
                            Driver, User.id == Driver.user_id
                        )  # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π
                        .where(not_(User.role_id.in_([3, 4, 5])))
                        .order_by(asc(User.role_id))
                    )
            elif table_name == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã":
                result = await session.execute(select(Admin))
            elif table_name == "–ö–ª–∏–µ–Ω—Ç—ã":
                result = await session.execute(select(Client))
            elif table_name == "–í–æ–¥–∏—Ç–µ–ª–∏":
                result = await session.execute(select(Driver))
            elif table_name == "–°–æ–æ–±—â–µ–Ω–∏—è":
                result = await session.execute(select(User_message))
            elif table_name == "–ü—Ä–æ–º–æ–∫–æ–¥—ã":
                result = await session.execute(select(Promo_Code))
            elif table_name == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ_–ø—Ä–æ–º–æ–∫–æ–¥—ã":
                result = await session.execute(select(Used_Promo_Code))
            elif table_name == "–û—Ç–∑—ã–≤—ã":
                result = await session.execute(select(Feedback))
            elif table_name == "–ó–∞–∫–∞–∑—ã":
                result = await session.execute(select(Order))
            elif table_name == "–¢–µ–∫—É—â–∏–µ_–∑–∞–∫–∞–∑—ã":
                result = await session.execute(select(Current_Order))
            elif table_name == "–ò—Å—Ç–æ—Ä–∏–∏_–∑–∞–∫–∞–∑–æ–≤":
                result = await session.execute(select(Order_history))
            elif table_name == "–°—Ç–∞—Ç—É—Å—ã":
                result = await session.execute(select(Status))
            elif table_name == "–¢–∏–ø—ã_–ø–æ–µ–∑–¥–æ–∫":
                result = await session.execute(select(Rate))
            elif table_name == "–†–æ–ª–∏":
                result = await session.execute(select(Role))
            elif table_name == "–ö–ª—é—á–∏":
                result = await session.execute(select(Secret_Key))

            rows = result.fetchall()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if not rows:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞.")
                return pd.DataFrame()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–∫—Ç–∞
            def extract_attributes(obj):
                if obj is None:
                    return {}
                return {
                    key: value
                    for key, value in vars(obj).items()
                    if not key.startswith("_")
                }

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data = []
            for row in rows:
                row_data = {}
                for alias, obj in row._mapping.items():
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
                    row_data.update(
                        {
                            f"{alias}_{key}": value
                            for key, value in extract_attributes(obj).items()
                        }
                    )
                data.append(row_data)

            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data)
            # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É _sa_instance_state, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if "_sa_instance_state" in df.columns:
                df.drop(columns=["_sa_instance_state"], inplace=True)

            return df  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {adm_id} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e} <get_table_as_dataframe>"
            )
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–∑–æ–≤–∞


async def get_message_from_user(tg_id: int, adm_id: int) -> pd.DataFrame:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame.
    """
    async with AsyncSessionLocal() as session:
        try:
            tg_id = int(tg_id)
            result = await session.execute(
                select(User_message).where(User_message.user_id == tg_id)
            )

            rows = result.fetchall()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if not rows:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ User_Messages –ø—É—Å—Ç–∞.")
                return pd.DataFrame()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–∫—Ç–∞
            def extract_attributes(obj):
                if obj is None:
                    return {}
                return {
                    key: value
                    for key, value in vars(obj).items()
                    if not key.startswith("_")
                }

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data = []
            for row in rows:
                row_data = {}
                for alias, obj in row._mapping.items():
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
                    row_data.update(
                        {
                            f"{alias}_{key}": value
                            for key, value in extract_attributes(obj).items()
                        }
                    )
                data.append(row_data)

            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(data)
            # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É _sa_instance_state, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if "_sa_instance_state" in df.columns:
                df.drop(columns=["_sa_instance_state"], inplace=True)

            return df  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {adm_id} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e} <get_table_as_dataframe>"
            )
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–∑–æ–≤–∞


async def get_admin_status(tg_id: int) -> Union[int, None]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Returns:
        ID —Å—Ç–∞—Ç—É—Å–∞ (int), –µ—Å–ª–∏ –ê–¥–º–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ None, –µ—Å–ª–∏ –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(
                select(Admin).join(User).where(User.tg_id == tg_id)
            )

            admin = result.scalar()

            if admin.status_id is None:
                logger.warning(
                    f"–°—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å Telegram ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω <get_admin_status>"
                )
                return None

            return admin.status_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º status_id –∏–ª–∏ None
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å Telegram ID {tg_id}: {e} <get_admin_status>"
            )
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def get_promo_codes():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(
                select(Promo_Code).order_by(Promo_Code.id.asc())
            )
            codes = result.scalars().all()

            return codes  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Promo_Code
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get_promo_codes: {e} <get_promo_codes>"
            )
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


async def set_new_admin(
    tg_id: int,
    username: str,
    name: str,
    contact: str,
    role_id: int,
    status_id: int,
    adm_id: str,
) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º tg_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞.
    """
    async with AsyncSessionLocal() as session:
        try:
            user = await session.scalar(select(User).where(User.tg_id == tg_id))

            if not user:
                user = await e_rq.set_user(tg_id, username, name, contact, role_id)

                admin = Admin(
                    user_id=user.id,
                    status_id=status_id,
                    adm_id=adm_id,
                )
                session.add(admin)

                client = Client(user_id=user.id, status_id=1, rate=5.00)
                session.add(client)
            else:
                if user.contact != contact:
                    user.contact = contact
                    
                user.name = name

                admin = await session.scalar(
                    select(Admin).where(Admin.user_id == user.id)
                )

                if not admin:
                    user.role_id = role_id
                    admin = Admin(
                        user_id=user.id,
                        status_id=status_id,
                        adm_id=adm_id,
                    )
                    session.add(admin)
                else:
                    admin.is_deleted = False
                    admin.status_id = status_id

            await session.commit()
            if not user.id:
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω —Å tg_id {tg_id}. <set_new_admin>")
            else:
                logger.info(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id {tg_id}. <set_new_admin>"
                )
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {tg_id}: {e} <set_new_admin>")


async def set_new_pswrd(
    tg_id: int,
    new_adm_id: str,
) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø–∞—Ä–æ–ª—å) –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            admin = await session.scalar(
                select(Admin).join(User).where(User.tg_id == tg_id)
            )

            encryption_key = os.getenv("PSWRD_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PSWRD_ENCRYPTION_KEY) <handler_old_pswrd>"
                )
                return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

            encrypted_password = e_sup.encrypt_data(new_adm_id, encryption_key)

            if admin is not None:
                admin.adm_id = encrypted_password  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ø–∞—Ä–æ–ª—å)
                await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            else:
                logger.error(f"–ê–¥–º–∏–Ω —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. <set_new_pswrd>")
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {tg_id}: {e} <set_new_pswrd>")


async def set_user_role(tg_id: int, adm_id: int, role_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    async with AsyncSessionLocal() as session:
        try:
            tg_id = int(tg_id)
            user = await session.scalar(select(User).where(User.tg_id == tg_id))

            if user is not None:
                user.role_id = role_id
                await session.commit()

                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å tg_id {tg_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å {role_id} –ê–¥–º–∏–Ω–æ–º {adm_id}. <set_user_role>"
                )
            else:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. <set_user_role>")
        except Exception as e:
            await session.rollback()
            logger.error(
                f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {adm_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e} <set_user_role>"
            )


async def set_status_admin(tg_id: int, status_id: int) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ê–¥–º–∏–Ω–∞.
    """
    async with AsyncSessionLocal() as session:
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Admin
            admin = await session.scalar(
                select(Admin).join(User).where(User.tg_id == tg_id)
            )

            if admin is not None:
                admin.status_id = status_id  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            else:
                logger.error(f"–ê–¥–º–∏–Ω —Å tg_id {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. <set_status_admin>")
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è tg_id {tg_id}: {e} <set_status_admin>")


async def set_promo_code(code: str, bonuses: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.
    """
    async with AsyncSessionLocal() as session:
        try:
            promo_code = Promo_Code(code=code, bonuses=bonuses)

            session.add(promo_code)
            await session.commit()
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ü—Ä–æ–º–æ–∫–æ–¥–∞: {e} <set_order_history>")


async def set_driver_status_deleted(driver_tg_id: int):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å is_deleted = True (–≤ —Ç–µ–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–¥–∏—Ç–µ–ª–µ).
    """
    async with AsyncSessionLocal() as session:
        try:
            user_driver = await session.scalar(
                select(User).where(User.tg_id == driver_tg_id)
            )

            if user_driver is not None:
                user_driver.is_deleted = True
                await session.commit()
            else:
                logger.error(
                    f"–í–æ–¥–∏—Ç–µ–ª—å —Å tg_id {driver_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. <set_driver_status_deleted>"
                )
        except Exception as e:
            await session.rollback()
            logger.error(
                f"–û—à–∏–±–∫–∞ –¥–ª—è tg_id {driver_tg_id}: {e} <set_driver_status_deleted>"
            )


async def check_driver(tg_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ù–ï–£–î–ê–õ–ï–ù–ù–´–ô –≤–æ–¥–∏—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID.

    Returns:
        True, –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —É–¥–∞–ª–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    async with AsyncSessionLocal() as session:
        try:
            tg_id = int(tg_id)

            driver = await session.scalar(
                select(Driver)
                .join(User)
                .where(User.tg_id == tg_id, User.is_deleted == False)
            )

            if driver is None:
                logger.warning(
                    f"–ê–∫—Ç–∏–≤–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å —Å Telegram ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω <check_driver>"
                )
            return driver is not None

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—å —Å Telegram ID {tg_id}: {e} <check_driver>"
            )
            return False


async def check_adm_pswrd(adm_tg_id: int, adm_pswrd: str) -> Optional[bool]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.

    Args:
        adm_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        adm_pswrd (str): –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        key (bytes): –ö–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç, False –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    async with AsyncSessionLocal() as session:
        try:
            admin = await session.scalar(
                select(Admin).join(User).where(User.tg_id == adm_tg_id)
            )

            if admin is None:
                logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {adm_tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return False

            encryption_key = os.getenv("PSWRD_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PSWRD_ENCRYPTION_KEY) <handler_old_pswrd>"
                )
                return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

            # –î–µ—à–∏—Ñ—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            decrypted_password = e_sup.decrypt_data(admin.adm_id, encryption_key)

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º
            return decrypted_password == adm_pswrd
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            return None


async def delete_all_messages_from_db(user_id: int) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            await session.execute(delete(User_message))
            await session.commit()
        except Exception as e:
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω–∞ {user_id}: {e} <delete_messages_from_db>")


async def full_delete_account(tg_id: int) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(select(User).filter_by(tg_id=tg_id))
            user = result.first()
            if user:
                await session.delete(user[0])
                await session.commit()
        except Exception as e:
            await session.rollback()
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e} <full_delete_account>"
            )


async def delete_promo_code(name_promo_code: str) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    async with AsyncSessionLocal() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
            promo_code_result = await session.execute(
                select(Promo_Code).where(Promo_Code.code == name_promo_code)
            )

            promo_code = promo_code_result.scalars().first()
            if promo_code:
                promo_code_id = promo_code.id

                # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
                await session.execute(
                    delete(Used_Promo_Code).where(
                        Used_Promo_Code.promo_code_id == promo_code_id
                    )
                )

                # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥
                await session.execute(
                    delete(Promo_Code).where(Promo_Code.code == name_promo_code)
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await session.commit()
            else:
                logger.info(f"–ü—Ä–æ–º–æ–∫–æ–¥ {name_promo_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e} <delete_promo_code>")
