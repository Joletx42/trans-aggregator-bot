from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    WebAppInfo,
)

from aiogram_calendar import SimpleCalendar

import os
import app.user_messages as um
import app.support as sup

from dotenv import load_dotenv

load_dotenv()


async def create_calendar():
    calendar_keyboard = await SimpleCalendar().start_calendar()
    calendar_keyboard.inline_keyboard.append(
        [
            InlineKeyboardButton(
                text=um.button_cancel_text(),
                callback_data="from_p_to_p",
            )
        ]
    )

    return calendar_keyboard


async def create_consider_button(start_coords: str):
    consider_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–∞—Ä—à—Ä—É—Ç –¥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                    url=f"https://yandex.ru/maps/?rtext=~{start_coords}",
                )
            ],
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ", callback_data="accept_order")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—åüö´", callback_data="reject_order")],
        ]
    )

    return consider_button


async def create_continue_trip(order_id: int):
    count_time_continue_trip = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 —á–∞—Å", callback_data="extension_1")],
            [InlineKeyboardButton(text="2 —á–∞—Å–∞", callback_data="extension_2")],
            [InlineKeyboardButton(text="3 —á–∞—Å–∞", callback_data="extension_3")],
            [InlineKeyboardButton(text="4 —á–∞—Å–∞", callback_data="extension_4")],
            [InlineKeyboardButton(text="5 —á–∞—Å–æ–≤", callback_data="extension_5")],
            [
                InlineKeyboardButton(
                    text=um.button_cancel_text(), callback_data=f"to_order_{order_id}"
                )
            ],
        ]
    )

    return count_time_continue_trip


async def create_order_history_keyboard(orders_in_history, get_latest_order_date):
    order_info_buttons = []

    for order_in_history in orders_in_history:
        date = get_latest_order_date(order_in_history)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        order_info_buttons.append(
            [
                InlineKeyboardButton(
                    text=f"{date} - –ó–∞–∫–∞–∑ ‚Ññ{order_in_history}",
                    callback_data=f"show_order_info_{order_in_history}",
                )
            ]
        )

    history_button = InlineKeyboardMarkup(
        inline_keyboard=[
            *order_info_buttons,
            [
                InlineKeyboardButton(
                    text=um.button_to_main_menu_text(), callback_data="main_menu"
                )
            ],
        ]
    )

    return history_button


async def create_remind_preorder_button(time_diff):
    time_list_buttons = []
    time_diff_minutes = time_diff.total_seconds() / 60  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
    time_diff_hours = int(time_diff.total_seconds() / 3600)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∞—Å—ã

    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ —á–∞—Å–∞
    if 25 <= time_diff_minutes < 60:
        time_list_buttons.append(
            [InlineKeyboardButton(text="–ó–∞ 15 –º–∏–Ω—É—Ç", callback_data="remind_15_m")]
        )
        time_list_buttons.append(
            [InlineKeyboardButton(text="–ó–∞ 20 –º–∏–Ω—É—Ç", callback_data="remind_20_m")]
        )

    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª–µ–µ —á–∞—Å–∞
    elif time_diff_minutes >= 60:
        time_list_buttons.append(
            [InlineKeyboardButton(text="–ó–∞ 30 –º–∏–Ω—É—Ç", callback_data="remind_30_m")]
        )
        time_list_buttons.append(
            [InlineKeyboardButton(text="–ó–∞ 1 —á–∞—Å", callback_data="remind_1_h")]
        )

    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫
    if time_diff_hours > 24:
        time_list_buttons.append(
            [InlineKeyboardButton(text="–ó–∞ —Å—É—Ç–∫–∏", callback_data="remind_1_d")]
        )

    # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω–µ–µ 5 —á–∞—Å–æ–≤
    if time_diff_hours < 5 and time_diff_hours >= 1:
        for i in range(2, time_diff_hours + 1):
            time_list_buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"–ó–∞ {i} —á–∞—Å–∞", callback_data=f"remind_{i}_h"
                    )
                ]
            )

    time_list_buttons.append(
        [InlineKeyboardButton(text="üö´–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", callback_data="remind_none")]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏
    inline_keyboard = []
    for row in time_list_buttons:
        inline_keyboard.append(row)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    remind_preorder_buttons = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    return remind_preorder_buttons


async def create_client_order_keyboard(orders):
    cancel_buttons = [
        [
            InlineKeyboardButton(
                text=um.button_to_order_with_order_id_text(order.id),
                callback_data=f"to_order_{order.id}",
            ),
            InlineKeyboardButton(
                text=f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id}",
                callback_data=f"cancel_order_{order.id}",
            ),
        ]
        for order in orders
    ]

    current_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=um.button_to_main_menu_text(), callback_data="main_menu"
                )
            ],
            *cancel_buttons,
        ]
    )

    return current_button


async def create_driver_order_keyboard(orders):
    to_order_buttons = [
        [
            InlineKeyboardButton(
                text=um.button_to_order_with_order_id_text(order.id),
                callback_data=f"to_order_{order.id}",
            ),
            InlineKeyboardButton(
                text=f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id}",
                callback_data=f"cancel_order_{order.id}",
            ),
        ]
        for order in orders
    ]

    current_button = InlineKeyboardMarkup(
        inline_keyboard=[
            *to_order_buttons,
            [
                InlineKeyboardButton(
                    text="–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ãüìå", callback_data="current_preorders"
                )
            ],
            [
                InlineKeyboardButton(
                    text=um.button_to_main_menu_text(), callback_data="main_menu"
                )
            ],
        ]
    )

    return current_button


async def create_driver_order_keyboard_without_to_order():
    current_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ãüìå", callback_data="current_preorders"
                )
            ],
            [
                InlineKeyboardButton(
                    text=um.button_to_main_menu_text(), callback_data="main_menu"
                )
            ],
        ]
    )

    return current_button


async def create_driver_preorder_keyboard(orders):
    cancel_buttons = [
        [
            InlineKeyboardButton(
                text=f"–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ{order.id}",
                callback_data=f"cancel_order_{order.id}",
            ),
        ]
        for order in orders
    ]

    current_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=um.button_back_text(),
                    callback_data=f"current_order",
                )
            ],
            [
                InlineKeyboardButton(
                    text=um.button_to_main_menu_text(), callback_data="main_menu"
                )
            ],
            *cancel_buttons
        ]
    )

    return current_button

async def create_driver_preorder_keyboard_without_to_order():
    current_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ãüìå", callback_data="current_preorders"
                )
            ],
            [
                InlineKeyboardButton(
                    text=um.button_to_main_menu_text(), callback_data="main_menu"
                )
            ],
        ]
    )

    return current_button


async def create_driving_process_keyboard(order, rate_id):
    encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
    decrypted_order_start_coords = sup.decrypt_data(order.start_coords, encryption_key)
    decrypted_order_finish_coords = sup.decrypt_data(order.finish_coords, encryption_key)

    if rate_id in [1, 4]:
        driving_process_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=um.button_in_place_text(), callback_data="in_place"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ú–∞—Ä—à—Ä—É—Ç –¥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                        url=f"https://yandex.ru/maps/?rtext=~{decrypted_order_start_coords}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=um.button_from_A_to_B_text(),
                        url=f"https://yandex.ru/maps/?rtext={decrypted_order_start_coords}~{decrypted_order_finish_coords}",
                    )
                ],
            ]
        )
    else:
        driving_process_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=um.button_in_place_text(), callback_data="in_place"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ú–∞—Ä—à—Ä—É—Ç –¥–æ —Ç–æ—á–∫–∏ –ê",
                        url=f"https://yandex.ru/maps/?rtext=~{order.start_coords}",
                    )
                ],
            ]
        )

    return driving_process_button


async def create_in_trip_keyboard(rate_id, finish_coords):
    if rate_id == 1:
        in_trip_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=um.button_from_A_to_B_text(),
                        url=f"https://yandex.ru/maps/?rtext=~{finish_coords}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=um.button_finish_trip_text(), callback_data="finish_trip"
                    )
                ],
            ]
        )
    else:
        in_trip_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=um.button_to_map_text(),
                        url="https://yandex.ru/maps/?rtext=~",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=um.button_finish_trip_text(), callback_data="finish_trip"
                    )
                ],
            ]
        )

    return in_trip_button


async def create_in_trip_button_for_client():
    in_trip_button_for_client = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=um.button_continue_trip_text(),
                    callback_data="continue_trip",
                )
            ],
        ]
    )

    return in_trip_button_for_client


async def get_keyboard_with_change_button(confirm_callback_data, change_query=""):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=um.button_confirm_text(), callback_data=confirm_callback_data
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ò–∑–º–µ–Ω–∏—Ç—å‚úèÔ∏è", switch_inline_query_current_chat=change_query
                )
            ],
        ]
    )


async def create_return_to_choise_payment_method(order_id: int):
    return_to_choise_payment_method = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=um.button_back_text(), callback_data=f"to_order_{order_id}"
                )
            ]
        ]
    )

    return return_to_choise_payment_method


async def get_confirm_start_loc_keyboard():
    return await get_keyboard_with_change_button("confirm_start")


async def get_change_start_loc_address_keyboard(address):
    return await get_keyboard_with_change_button("confirm_start", change_query=address)


async def get_confirm_end_loc_keyboard():
    return await get_keyboard_with_change_button("confirm_end")


async def get_change_end_loc_address_keyboard(address):
    return await get_keyboard_with_change_button("confirm_end", change_query=address)


async def get_confirm_start_loc_keyboard_for_driver():
    return await get_keyboard_with_change_button("confirm_start_order")


async def get_confirm_new_price(order_id: int):
    confirm_new_price = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=um.button_confirm_text(), callback_data="confirm_new_price"
                )
            ],
            [
                InlineKeyboardButton(
                    text=um.button_cancel_text(), callback_data=f"to_order_{order_id}"
                )
            ],
        ]
    )

    return confirm_new_price


main_button_client = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üöó",
                callback_data="make_order",
            ),
            InlineKeyboardButton(
                text=um.button_current_order_text(),
                callback_data="current_order",
            ),
        ],
        [
            InlineKeyboardButton(
                text=um.button_profile_text(), callback_data="profile"
            ),
            InlineKeyboardButton(
                text=um.button_history_orders_text(), callback_data="history"
            ),
        ],
    ]
)


main_button_driver_on_line = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=um.button_to_group(), url=os.getenv("GROUP_URL"))],
        [
            InlineKeyboardButton(
                text=um.button_current_order_text(), callback_data="current_order"
            )
        ],
        [InlineKeyboardButton(text=um.button_profile_text(), callback_data="profile")],
        [
            InlineKeyboardButton(
                text=um.button_history_orders_text(), callback_data="history"
            )
        ],
        [InlineKeyboardButton(text="–£–π—Ç–∏ —Å –ª–∏–Ω–∏–∏üî¥", callback_data="on_line")],
        # [InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", web_app=WebAppInfo(url=os.getenv("PRIVACY_POLICY_URL")))],
    ]
)

main_button_driver_not_on_line = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–π—Ç–∏ –Ω–∞ –ª–∏–Ω–∏—éüü¢", callback_data="not_on_line")],
        [
            InlineKeyboardButton(
                text=um.button_current_order_text(), callback_data="current_order"
            )
        ],
        [InlineKeyboardButton(text=um.button_profile_text(), callback_data="profile")],
        [
            InlineKeyboardButton(
                text=um.button_history_orders_text(), callback_data="history"
            )
        ],
        # [InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", web_app=WebAppInfo(url=os.getenv("PRIVACY_POLICY_URL")))],
    ]
)

confirm_start_button_for_client = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_accept_order_text(),
                callback_data="accept_confirm_start",
            )
        ],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑üö´", callback_data="main_menu")],
    ]
)

choose_order_type_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–û—Ç —Ç–æ—á–∫–∏ –ê –¥–æ —Ç–æ—á–∫–∏ –ë‚õ≥Ô∏è", callback_data="from_p_to_p"
            )
        ],
        [
            InlineKeyboardButton(text="–ü–æ–∫–∞—Ç–∞—Ç—å—Å—èüç∏", callback_data="to_drive"),
        ],
        [InlineKeyboardButton(text=um.button_back_text(), callback_data="main_menu")],
    ]
)

submission_date_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="–í –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")],
        [KeyboardButton(text=um.button_cancel_text())],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
    one_time_keyboard=True,
)

submission_time_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")],
        [KeyboardButton(text=um.button_cancel_text())],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
    one_time_keyboard=True,
)

menu_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_main_menu_text(), callback_data="main_menu"
            )
        ],
        [
            InlineKeyboardButton(
                text=um.button_current_order_text(), callback_data="current_order"
            )
        ],
        [
            InlineKeyboardButton(
                text=um.button_support_text(), url=os.getenv("SUPPORT_URL")
            )
        ],
    ]
)

menu_register_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_main_menu_text(), callback_data="main_menu"
            )
        ],
        [
            InlineKeyboardButton(
                text=um.button_support_text(), url=os.getenv("SUPPORT_URL")
            )
        ],
    ]
)

history_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=um.button_back_text(), callback_data="history")],
    ]
)

client_profile_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_main_menu_text(), callback_data="main_menu"
            )
        ],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è‚úèÔ∏è", callback_data="change_the_points")],
        [
            InlineKeyboardButton(
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥üé´", callback_data="use_promo_code"
            )
        ],
        [
            InlineKeyboardButton(
                text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞üë•", callback_data="referral_link"
            )
        ],
        [
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå", callback_data="delete_account"
            )
        ],
    ]
)

driver_profile_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_main_menu_text(), callback_data="main_menu"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥üé´", callback_data="use_promo_code"
            )
        ],
        [
            InlineKeyboardButton(
                text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞üë•", callback_data="referral_link"
            )
        ],
    ]
)

use_referral_link_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–í–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—Éüì®", callback_data="use_referral_link"
            )
        ],
        [InlineKeyboardButton(text=um.button_back_text(), callback_data="profile")],
    ]
)

back_to_profile_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=um.button_back_text(), callback_data="profile")],
    ]
)

role_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º",
            )
        ],
        [
            KeyboardButton(
                text="–°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º –•–æ—á—É–ù–µ–º—Ü–∞",
            )
        ],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
    one_time_keyboard=True,
)

loc_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–ºüìç",
                request_location=True,
            )
        ],
        [KeyboardButton(text=um.button_cancel_text())],
    ],
    resize_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç",
    one_time_keyboard=True,
)

destin_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–ºüìç",
                request_location=True,
            )
        ],
        [KeyboardButton(text=um.button_cancel_text())],
        [KeyboardButton(text=um.button_change_location_point_text())]
    ],
    resize_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç",
    one_time_keyboard=True,
)

driver_loc_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–ºüìç",
                request_location=True,
            )
        ],
        [KeyboardButton(text=um.button_cancel_text())],
    ],
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç",
    one_time_keyboard=True,
)

loc_driver_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–ü–û–î–ï–õ–ò–¢–¨–°–Ø –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï–úüìç",
                request_location=True,
            )
        ],
    ],
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
    one_time_keyboard=True,
)

rate_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_trip_text(), callback_data="from_p_to_p"
            )
        ],
        [InlineKeyboardButton(text="–í –¥—Ä—É–≥–æ–π —Ä–∞–∑üö´", callback_data="main_menu")],
    ]
)

comment_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç")]],
    resize_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
    one_time_keyboard=True,
)

contact_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(
                text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±",
                request_contact=True,
            )
        ]
    ],
    resize_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
    one_time_keyboard=True,
)

group_message_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ä–æ–±–Ω–µ–µüîé",
                callback_data="order_desc",
            )
        ]
    ]
)

under_consideration_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_order_text(),
                url=os.getenv("BOT_URL"),
            )
        ]
    ]
)

client_consider_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_accept_order_text(), callback_data="client_accept_order"
            )
        ],
        [
            InlineKeyboardButton(
                text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—èüö´", callback_data="client_reject_order"
            )
        ],
    ]
)

payment_client_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üì≤–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü", callback_data="payment_fps_by_client"
            )
        ],
        # [
        #     InlineKeyboardButton(
        #         text="üí≥–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data="payment_card_by_client"
        #     )
        # ],
        [
            InlineKeyboardButton(
                text="üíé–û–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏", callback_data="payment_bonuses_by_client"
            )
        ],
    ]
)

payment_driver_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ –ø–æ –°–ë–ü", callback_data="payment_fps")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ –Ω–∞–ª–∏—á–∫–æ–π", callback_data="payment_cash")],
    ]
)

feedback_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="feedback_1")],
        [InlineKeyboardButton(text="2", callback_data="feedback_2")],
        [InlineKeyboardButton(text="3", callback_data="feedback_3")],
        [InlineKeyboardButton(text="4", callback_data="feedback_4")],
        [InlineKeyboardButton(text="5", callback_data="feedback_5")],
    ],
)


feedback_comment_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í—Å—ë –∏ —Ç–∞–∫ –Ω–æ—Ä–º")]],
    resize_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
    one_time_keyboard=True,
)

in_place_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—Éüöó", callback_data="start_trip")],
    ]
)

in_trip_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_map_text(),
                url="https://yandex.ru/maps/?rtext=~",
            )
        ],
        [
            InlineKeyboardButton(
                text=um.button_continue_trip_text(), callback_data="continue_trip"
            )
        ],
        [
            InlineKeyboardButton(
                text=um.button_finish_trip_text(), callback_data="finish_trip"
            )
        ],
    ]
)


accept_continue_trip = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=um.button_to_trip_text(), callback_data="go_to_new_trip"
            )
        ],
        [
            InlineKeyboardButton(
                text=um.button_back_text(), callback_data="continue_trip"
            )
        ],
    ]
)

keyboard_remove = ReplyKeyboardRemove()

region_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")]],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç.",
)

reject_client_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")],
        [KeyboardButton(text="–ü–æ–º–µ–Ω—è–ª–∏—Å—å –ø–ª–∞–Ω—ã")],
        [KeyboardButton(text="–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª")],
        [KeyboardButton(text="–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")],
        [KeyboardButton(text="–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")],
        [KeyboardButton(text="–ù–µ—É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏")],
        [KeyboardButton(text="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π")],
        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
)

reject_driver_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ —Å–≤—è–∑—å")],
        [KeyboardButton(text="–ü–æ–º–µ–Ω—è–ª–∏—Å—å –ø–ª–∞–Ω—ã")],
        [KeyboardButton(text="–ù–µ—É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏")],
        [KeyboardButton(text="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π")],
        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
)

group_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text=um.button_to_group(), url=os.getenv("GROUP_URL"))],
    ]
)

confirm_delete_account = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="confirm_delete_account"
            )
        ],
        [InlineKeyboardButton(text=um.button_cancel_text(), callback_data="main_menu")],
    ]
)

cancel_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=um.button_cancel_text())]],
    resize_keyboard=True,
    one_time_keyboard=True,
)

sign_contract_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å", callback_data="accept_policy")],
        [InlineKeyboardButton(text="üö´–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="reject_policy")]
    ]
)

# web_app_button = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", web_app=WebAppInfo(url=os.getenv("PRIVACY_POLICY_URL")))]
#     ]
# )
