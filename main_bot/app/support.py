import os
import re
import math
import uuid
import aiohttp
import aiofiles
import asyncio
import logging
import pytz
from PyPDF2 import PdfReader
import hashlib

from typing import Tuple, Union
from scipy.stats import norm
from datetime import datetime, timedelta
from dotenv import load_dotenv
from cryptography.fernet import Fernet

from aiogram import Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaPhoto,
    FSInputFile,
    InlineKeyboardMarkup,
)
from aiogram.fsm.context import FSMContext

import app.database.requests as rq
import app.keyboards as kb
import app.user_messages as um
import app.states as st
import app.support as sup

load_dotenv()

logger = logging.getLogger(__name__)


async def scheduled_switch_order_status_and_block_driver(
    order,
    client_id: int,
    driver_id: int,
    order_status_id: int,
    driver_tg_id: int,
    client_tg_id: int,
    rate_id: int,
    order_info_for_driver: str,
    order_info_for_client: str,
    username_client: str,
    arrival_time: str,
) -> None:
    try:
        bot = Bot(token=os.getenv("TOKEN_MAIN"))  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

        await rq.set_order_history(order.id, driver_id, "–≤–æ–¥–∏—Ç–µ–ª—å –≤ –ø—É—Ç–∏", "-")
        await rq.set_status_order(client_id, order.id, order_status_id)
        await rq.set_status_driver(driver_tg_id, 9)

        driving_process_button = await kb.create_driving_process_keyboard(
            order, rate_id
        )

        msg = await bot.send_message(
            chat_id=driver_tg_id,
            text=um.client_accept_text_for_driver(
                order.id, username_client, order_info_for_driver
            ),
            reply_markup=driving_process_button,
        )
        await rq.set_message(driver_tg_id, msg.message_id, msg.text)

        msg = await bot.send_message(
            chat_id=client_tg_id,
            text=um.client_accept_text_for_client(arrival_time, order_info_for_client),
        )
        await rq.set_message(client_tg_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞: {e} <scheduled_switch_order_status_and_block_driver>",
            exc_info=True,
        )
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        if bot and bot.session:
            await bot.session.close()


async def scheduled_client_reminder_preorder(
    client_tg_id: int,
    order_info_for_client: str,
) -> None:
    try:
        bot = Bot(token=os.getenv("TOKEN_MAIN"))  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        msg = await bot.send_message(
            chat_id=client_tg_id,
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ!\n–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n\n#############\n{order_info_for_client}\n#############\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        )
        await rq.set_message(client_tg_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞: {e} <scheduled_reminder_preorder>",
            exc_info=True,
        )
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        if bot and bot.session:
            await bot.session.close()


async def scheduled_driver_reminder_preorder(
    driver_tg_id: int,
    order_info_for_driver: str,
) -> None:
    try:
        bot = Bot(token=os.getenv("TOKEN_MAIN"))  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        msg = await bot.send_message(
            chat_id=driver_tg_id,
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ!\n–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n\n#############\n{order_info_for_driver}\n#############\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–∫–∞–∑—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        )
        await rq.set_message(driver_tg_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞: {e} <scheduled_reminder_preorder>",
            exc_info=True,
        )
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        if bot and bot.session:
            await bot.session.close()


async def scheduled_reminder_finish_trip(
    client_tg_id: int,
    driver_tg_id: int,
    minutes: int,
) -> None:
    try:
        bot = Bot(token=os.getenv("TOKEN_MAIN"))  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        msg = await bot.send_message(
            chat_id=client_tg_id,
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç!",
        )
        await rq.set_message(client_tg_id, msg.message_id, msg.text)

        msg = await bot.send_message(
            chat_id=driver_tg_id,
            text=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç!",
        )
        await rq.set_message(driver_tg_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞: {e} <scheduled_reminder_finish_trip>",
            exc_info=True,
        )
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        if bot and bot.session:
            await bot.session.close()


async def scheduled_delete_message_in_group(
    order_id: int,
    group_chat_id: str,
    user_id: int,
    client_id: int,
) -> None:
    bot = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –±–æ—Ç–∞
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=os.getenv("TOKEN_MAIN"))

        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
        msg_id = await rq.get_message_id_by_text(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}")
        if msg_id is not None:
            await bot.delete_message(chat_id=group_chat_id, message_id=msg_id)
            await rq.delete_certain_message_from_db(msg_id)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É
        driver_id = await rq.get_latest_driver_id_by_order_id(order_id)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
        await rq.set_status_order(client_id, order_id, 8)
        await rq.set_order_history(
            order_id,
            driver_id,
            "–æ—Ç–º–µ–Ω–µ–Ω",
            "–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ (–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω)",
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        msg = await bot.send_message(
            chat_id=user_id,
            text=f"üö´–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –Ω–µ –Ω–∞—à–ª–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        )
        await rq.set_message(user_id, msg.message_id, msg.text)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –¥–ª—è user_id {user_id}: {e} <scheduled_delete_message_in_group>",
            exc_info=True,
        )
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        if bot and bot.session:
            await bot.session.close()


async def send_message(message: Message, user_id: int, text: str):
    msg = await message.answer(text)
    await rq.set_message(user_id, msg.message_id, msg.text)


async def origin_check_user(user_id: int, message: Message, state: FSMContext):
    try:
        user_exists = await rq.check_user(user_id)
        user_role = await rq.check_role(user_id)

        if not user_exists:
            if not await rq.check_sign_privacy_policy(user_id):
                privacy_url = sup.escape_markdown(os.getenv("PRIVACY_POLICY_URL"))

                msg = await message.answer(
                    f'–ß—Ç–æ–±—ã –±—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—Ç–µ—Å—å —Å [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({privacy_url}) –∏ [–°–æ–≥–ª–∞—Å–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö]({privacy_url})\\.\n\n'
                    '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ \\"‚úÖ–ü–æ–¥–ø–∏—Å–∞—Ç—å\\", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ\\.',
                    parse_mode="MarkdownV2", 
                    reply_markup=kb.sign_contract_button,
                )
                await rq.set_message(user_id, msg.message_id, msg.text)
            else:
                msg = await message.answer(
                    um.reg_message_text()
                )
                await rq.set_message(user_id, msg.message_id, msg.text)

                msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=kb.role_button)
                await rq.set_message(user_id, msg.message_id, msg.text)

                await state.set_state(st.Reg.role)

            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ–≥–æ —Ä–æ–ª—å == 6
        if user_role == 6:
            await message.delete()
            await rq.delete_messages_from_db(user_id)
            await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        if user_role == 4:
            await message.delete()
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        return True

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –¥–ª—è user_id {user_id}: {e} <origin_check_user>",
            exc_info=True,
        )
        await send_message(message, user_id, um.common_error_message())


async def check_rate_for_order_info(rate_id: int, order_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç `rate_id` –∏ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é.

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –µ—Å–ª–∏ `rate_id` –≤–∞–ª–∏–¥–µ–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
              `None` –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    rate_functions = {
        1: get_order_info_p_to_p,
        2: get_order_info_to_drive,
        4: get_order_info_p_to_p,
        5: get_order_info_to_drive,
    }

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ rate_id
    order_info_function = rate_functions.get(rate_id)

    if order_info_function:
        try:
            order_info = await order_info_function(order_id)
            return order_info
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ {order_id}: {e} <check_rate_for_order_info>"
            )
            return None
    else:
        return None  # –ï—Å–ª–∏ rate_id –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


async def check_task(
    user_id: int,
    callback: CallbackQuery,
    state: FSMContext,
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ (—Ç–∞–π–º–µ—Ä–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –µ–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
    """
    try:
        data = await state.get_data()
        task = data.get("task")

        if task is None:
            msg = await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
            await rq.set_message(user_id, msg.message_id, msg.text)
            return

        if not task.done():
            task.cancel()
            msg = await callback.message.answer("–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏!")
            await rq.set_message(user_id, msg.message_id, msg.text)

            await state.update_data(task=None)
        else:
            msg = await callback.message.answer("–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            await rq.set_message(user_id, msg.message_id, msg.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <check_task>")


async def delete_decrypted_file(file_path: str):
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
    """
    try:
        os.remove(file_path)
        logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    except PermissionError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {file_path}")
    except Exception as e:
        logger.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")


async def send_driver_photos(message: Message, tg_id: int, driver_info: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–æ–¥–∏—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

    Returns:
        str: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—É—Å—Ç –∏–ª–∏ –≤—Å–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        None: –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
    """
    media = []
    user_id = message.from_user.id
    decrypted_file_paths = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        encryption_key = os.getenv("IMAGE_ENCRYPTION_KEY")
        if not encryption_key:
            logger.error(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_ENCRYPTION_KEY) <send_driver_photos>"
            )
            return "–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è."

        cipher = Fernet(encryption_key.encode())

        decrypted_dir_path = os.getenv("DECRYPTED_IMAGE_DIR")
        if not decrypted_dir_path:
            logger.error(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (DECRYPTED_IMAGE_DIR) <send_driver_photos>"
            )
            return

        # Ensure the decrypted image directory exists
        os.makedirs(decrypted_dir_path, exist_ok=True)

        for photo_path in driver_info["photos"]:
            if photo_path:
                try:
                    encrypted_file_path = f'{os.getenv("ENCRYPTED_IMAGE_DIR")}/{photo_path}'  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                    if not encrypted_file_path:
                        logger.error(
                            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (ENCRYPTED_IMAGE_DIR) <send_driver_photos>"
                        )
                        return None

                    async with aiofiles.open(encrypted_file_path, "rb") as f:
                        encrypted_data = await f.read()

                    decrypted_data = cipher.decrypt(encrypted_data)

                    # Determine the decrypted file path
                    decrypted_file_path = os.path.join(
                        decrypted_dir_path,
                        os.path.basename(photo_path).replace(".enc", ""),
                    )  # Remove ".enc" if present

                    # Save the decrypted data to a permanent file
                    async with aiofiles.open(decrypted_file_path, "wb") as outfile:
                        await outfile.write(decrypted_data)

                    # Add the decrypted file path to the list
                    decrypted_file_paths.append(decrypted_file_path)

                    # Create InputFile object from the decrypted file
                    input_file = FSInputFile(decrypted_file_path)

                    # Create InputMediaPhoto using the InputFile object
                    media.append(InputMediaPhoto(media=input_file))

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {photo_path} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <send_driver_photos>"
                    )

        if media:
            try:
                messages = await message.bot.send_media_group(
                    chat_id=tg_id, media=media
                )  # Use aiogram bot
                for msg in messages:  # No message objects returned
                    await rq.set_message(
                        tg_id, msg.message_id, "—Ñ–æ—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—è"
                    )  # Assuming rq is defined elsewhere

                # Schedule file deletion
                asyncio.create_task(schedule_deletion(decrypted_file_paths))

                return None  # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}"
        else:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <send_driver_photos>")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."


async def schedule_deletion(file_paths):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    for file_path in file_paths:
        os.remove(file_path)


async def delete_messages(
    message: Message, messages_to_delete: list, for_admin: bool = False
) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞.

    Returns:
        bool: –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ False
    """
    try:
        # Extract message_id and user_id safely
        message_ids = []
        message_user_ids = []

        for msg in messages_to_delete:
            try:
                message_ids.append(msg.message_id)
                message_user_ids.append(msg.user_id)
            except AttributeError as e:
                logger.warning(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (message_id –∏–ª–∏ user_id): {e} <delete_messages>"
                )
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ–±–æ–∏–º —Å–ø–∏—Å–∫–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for msg_id, user_id in zip(message_ids, message_user_ids):
            try:
                await message.bot.delete_message(
                    chat_id=user_id, message_id=msg_id
                )  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –∏–∑ —á–∞—Ç–∞ {user_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <delete_messages>"
                )

        return True
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <delete_messages>")
        return False


async def delete_messages_from_chat(
    user_id: int, message: Message, for_admin: bool = False
) -> bool:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏–∑ —á–∞—Ç–∞.

    Returns:
        bool: –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∏–Ω–∞—á–µ False
    """
    try:
        messages_to_delete = await rq.get_and_delete_user_messages(user_id)

        if messages_to_delete:
            result = await delete_messages(message, messages_to_delete, for_admin)
            return result
        elif for_admin:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <delete_messages_from_chat>"
            )
            return
        else:
            logger.warning(
                f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <delete_messages_from_chat>"
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <delete_messages_from_chat>"
        )


async def ban_user(user_id: int, message: Message) -> None:
    """
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.

    Returns:
        None
    """
    try:
        group_chat_id = os.getenv("GROUP_CHAT_ID")
        if group_chat_id is None:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º–º-ID –≥—Ä—É–ø–ø—ã (GROUP_CHAT_ID) <ban_user>")
            return

        result = await message.bot.ban_chat_member(
            chat_id=group_chat_id, user_id=user_id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if (
            not result
        ):  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É truthiness, —Ç–∞–∫ –∫–∞–∫ ban_chat_member –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω <ban_user>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <ban_user>")


async def unban_user(user_id: int, message: Message) -> None:
    """
    –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.

    Returns:
        None
    """
    try:
        group_chat_id = os.getenv("GROUP_CHAT_ID")
        if group_chat_id is None:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º–º-ID –≥—Ä—É–ø–ø—ã (GROUP_CHAT_ID) <unban_user>")
            return

        result = await message.bot.unban_chat_member(
            chat_id=group_chat_id, user_id=user_id
        )

        if not result:  # Unban return True
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω <unban_user>")
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <unban_user>"
        )


async def get_order_info_p_to_p(order_id: int) -> str:
    order, client_name = await rq.get_order_by_id_with_client(order_id)
    encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
    if not encryption_key:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_info_p_to_p>")
        return None

    decrypted_start = sup.decrypt_data(order.start, encryption_key)
    decrypted_finish = sup.decrypt_data(order.finish, encryption_key)

    text = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {order.submission_time}\nüë§–ó–∞–∫–∞–∑—á–∏–∫: {client_name}\n\nüìç–û—Ç–∫—É–¥–∞: {decrypted_start}\nüìç–ö—É–¥–∞: {decrypted_finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {order.distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {order.trip_time}\nüí∞–¶–µ–Ω–∞: {order.price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}"
    return text


async def get_order_info_to_drive(order_id: int) -> str:
    order, client_name = await rq.get_order_by_id_with_client(order_id)
    encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
    if not encryption_key:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_info_to_drive>")
        return None

    decrypted_start = sup.decrypt_data(order.start, encryption_key)

    text = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {order.submission_time}\nüë§–ó–∞–∫–∞–∑—á–∏–∫: {client_name}\n\nüìç–û—Ç–∫—É–¥–∞: {decrypted_start}\nüöó–¢–∞—Ä–∏—Ñ: {order.finish}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}"
    return text


async def get_order_time_and_status(order_in_history):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    order_status = getattr(order_in_history, "status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    order_time = getattr(order_in_history, "order_time", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")

    return f"üïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {order_time}\nüí•–°—Ç–∞—Ç—É—Å: {order_status}"


async def get_history_order_info(user_id: int, order_in_history, user_role: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∑–∞–∫–∞–∑–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è.

    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∑–∞–∫–∞–∑–µ, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–∑ `sup.get_order_history`, –∏–ª–∏ `None` –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        order_history_id = order_in_history.id
        rate_id = await rq.check_rate(
            user_id, order_in_history.order_id
        )  # –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id
        if rate_id is None:
            logger.error(f"–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω <get_history_order_info>")
            return None

        if user_role == 1:  # –ö–ª–∏–µ–Ω—Ç
            driver_id = await rq.get_latest_driver_id_by_order_id(
                order_in_history.order_id
            )
            if driver_id is None:
                driver_id = None

            client_id = await rq.get_client(user_id)
            if client_id is None:
                logger.error(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω <get_history_order_info>")
                return None
        else:  # –í–æ–¥–∏—Ç–µ–ª—å
            client_id = await rq.get_client_by_order(order_in_history.order_id)
            if client_id is None:
                logger.error(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω <get_history_order_info>")
                return None

            driver_id = await rq.get_driver(user_id)
            if driver_id is None:
                logger.error(f"–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω <get_history_order_info>")
                return None

        order_status = order_in_history.status
        order = await rq.get_order_by_id(order_in_history.order_id)
        if order is None:
            logger.error(f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω <get_history_order_info>")
            return None

        return await get_order_history(
            order_history_id,
            client_id,
            driver_id,
            rate_id,
            order.id,
            order.start,
            order.finish,
            order.comment,
            order_status,
            order.price,
            order.distance,
            order.trip_time,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <get_history_order_info>")
        return None


async def show_order_history(user_id: int, is_callback: bool = False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è) –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏.

    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∫–ª–∏–µ–Ω—Ç/–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.
        None: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        user_role = await rq.check_role(user_id)
        if user_role is None:
            logger.error(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <show_order_history>"
            )
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å."

        if user_role == 1:  # –†–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
            client_id = await rq.get_client(user_id)
            if client_id is None:
                logger.error(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω <show_order_history>")
                return "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

            orders_in_history = await rq.get_order_history_for_client_by_order_id(
                client_id
            )

        else:  # –†–æ–ª—å –≤–æ–¥–∏—Ç–µ–ª—è
            driver_id = await rq.get_driver(user_id)
            if driver_id is None:
                logger.error(f"–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω <show_order_history>")
                return "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

            orders_in_history = await rq.get_order_history_for_driver_by_order_id(
                driver_id
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if not orders_in_history:
            logger.warning(
                f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <show_order_history>"
            )
            return "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞."

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        async def get_latest_dates(order_ids):
            return await asyncio.gather(
                *[
                    rq.get_latest_order_date_by_order_id(order_id)
                    for order_id in order_ids
                ]
            )

        latest_dates = await get_latest_dates(orders_in_history)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é –≤—ã–Ω–µ—Å–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        history_button = await kb.create_order_history_keyboard(
            orders_in_history,
            lambda order_id: latest_dates[orders_in_history.index(order_id)],
        )

        return history_button

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <show_order_history>")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def show_current_orders(
    user_id: int, is_callback: bool = False
) -> Union[Tuple[str, InlineKeyboardMarkup], str, None]:  # More precise return type
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è.

    Returns:
        Tuple[str, InlineKeyboardMarkup]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞/–≤–æ–¥–∏—Ç–µ–ª—è).
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∫–ª–∏–µ–Ω—Ç/–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.
        None: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        role_id = await rq.check_role(user_id)
        if role_id is None:
            logger.error(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} <show_current_orders>"
            )
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å."

        if role_id == 1:  # –†–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞
            client_id = await rq.get_client(user_id)
            if client_id is None:
                logger.error(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω <show_current_orders>")
                return "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

            orders = await rq.get_all_active_orders(client_id)
            if not orders:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π
                logger.warning(
                    f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} <show_current_orders>"
                )
                return "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            orders_list = []

            for order in orders:
                rate_id = await rq.check_rate(user_id, order.id)
                if rate_id is None:
                    logger.error(
                        f"–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} <show_current_orders>"
                    )
                    return "–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."

                order_status = await rq.get_status_name_for_order(order.id)
                if order_status is None:
                    logger.error(
                        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} <show_current_orders>"
                    )
                    return "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."

                order_info = None
                if order_status in {
                    "–ø—Ä–∏–Ω—è—Ç",
                }:
                    order_info = await get_order_info_for_client(
                        rate_id,
                        order.submission_time,
                        order.id,
                        order.start,
                        order.finish,
                        order.comment,
                        order_status,
                        order.price,
                        order.distance,
                        order.trip_time,
                    )
                elif order_status in {
                    "—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è",
                    "–≤–æ–¥–∏—Ç–µ–ª—å –≤ –ø—É—Ç–∏",
                    "–≤ –ø—É—Ç–∏",
                    "–æ–ø–ª–∞—Ç–∞",
                    "–Ω–∞ –º–µ—Å—Ç–µ",
                    "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è",
                    "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞",
                    "–ø—Ä–µ–¥–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
                }:
                    order_info = await get_order_info_for_client_with_driver(
                        rate_id,
                        order.submission_time,
                        order.id,
                        order.start,
                        order.finish,
                        order.comment,
                        order_status,
                        order.price,
                        order.distance,
                        order.trip_time,
                    )

                if not order_info:
                    logger.warning(
                        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} <show_current_orders>"
                    )
                    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

                orders_list.append(order_info)

            result_orders_info = "\n#############\n".join(orders_list)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é –≤—ã–Ω–µ—Å–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            current_button = await kb.create_client_order_keyboard(orders)

        else:  # –†–æ–ª—å –≤–æ–¥–∏—Ç–µ–ª—è
            driver_id = await rq.get_driver(user_id)
            if driver_id is None:
                logger.error(f"–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω <show_current_orders>")
                return "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            orders = await rq.get_active_orders_for_driver(driver_id)
            if not orders:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π
                logger.warning(
                    f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} <show_current_orders>"
                )
                order_info = um.no_active_orders_text()

                result_orders_info = order_info
                current_button = (
                    await kb.create_driver_order_keyboard_without_to_order()
                )
            else:
                orders_list = []

                for order in orders:
                    rate_id = await rq.check_rate(user_id, order.id)
                    if rate_id is None:
                        logger.error(
                            f"–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} <show_current_orders>"
                        )
                        return "–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."

                    order_status = await rq.get_status_name_for_order(order.id)
                    if order_status is None:
                        logger.error(
                            f"–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} <show_current_orders>"
                        )
                        return "–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."

                    order_info = await get_order_info_for_driver(
                        rate_id,
                        order.submission_time,
                        order.id,
                        order.start,
                        order.finish,
                        order.comment,
                        order_status,
                        order.price,
                        order.distance,
                        order.trip_time,
                    )

                    if not order_info:
                        logger.warning(
                            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} <show_current_orders>"
                        )
                        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

                    orders_list.append(order_info)

                result_orders_info = "\n#############\n".join(orders_list)
                current_button = await kb.create_driver_order_keyboard(orders)

        return result_orders_info, current_button
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <show_current_orders>")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def show_current_preorders(
    user_id: int,
) -> Union[Tuple[str, InlineKeyboardMarkup], str, None]:  # More precise return type
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è.

    Returns:
        Tuple[str, InlineKeyboardMarkup]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞—Ö –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞/–≤–æ–¥–∏—Ç–µ–ª—è).
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∫–ª–∏–µ–Ω—Ç/–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.
        None: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:

        driver_id = await rq.get_driver(user_id)
        if driver_id is None:
            logger.error(f"–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω <show_current_preorders>")
            return "–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        preorders = await rq.get_active_preorders_for_driver(driver_id)
        if not preorders:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π
            logger.warning(
                f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} <show_current_preorders>"
            )
            return "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        preorders_list = []

        for preorder in preorders:
            rate_id = await rq.check_rate(user_id, preorder.id)
            if rate_id is None:
                logger.error(
                    f"–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {preorder.id} <show_current_preorders>"
                )
                return "–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."

            order_status = await rq.get_status_name_for_order(preorder.id)
            if order_status is None:
                logger.error(
                    f"–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {preorder.id} <show_current_preorders>"
                )
                return "–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."

            preorder_info = await get_order_info_for_driver(
                rate_id,
                preorder.submission_time,
                preorder.id,
                preorder.start,
                preorder.finish,
                preorder.comment,
                order_status,
                preorder.price,
                preorder.distance,
                preorder.trip_time,
            )

            if not preorder_info:
                logger.warning(
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {preorder.id} <show_current_preorders>"
                )
                return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            preorders_list.append(preorder_info)

        result_orders_info = "\n#############\n".join(preorders_list)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é –≤—ã–Ω–µ—Å–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        current_button = await kb.create_driver_preorder_keyboard(preorders)

        return result_orders_info, current_button

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <show_current_preorders>")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def set_timer_for_waiting(
    user_id: int,
    order_id: int,
    callback: CallbackQuery,
    state: FSMContext,
    seconds: int,
):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º.

    Returns:
        None
    """
    try:
        data = await state.get_data()
        task = data.get("task")

        if task and not task.done():
            await callback.answer("–¢–∞–π–º–µ—Ä –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        msg = await callback.message.answer(f"–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥.")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        task = asyncio.create_task(
            run_timer_for_waiting(
                user_id,
                order_id,
                callback.message,
                callback.message.chat.id,
                msg.message_id,
                seconds,  # –ü–µ—Ä–µ–¥–∞–µ–º seconds –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                state,
            )
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task=task)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e} <set_timer_for_waiting>"
        )


async def run_timer_for_waiting(
    user_id: int,
    order_id: int,
    message: Message,
    chat_id: int,
    message_id: int,
    seconds: int,
    state: FSMContext,
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏.  –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä.
        order_id (int): ID –∑–∞–∫–∞–∑–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–≤—è–∑–∞–Ω —Ç–∞–π–º–µ—Ä.
        message (Message): –û–±—ä–µ–∫—Ç Message, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        chat_id (int): ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.
        seconds (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞.
        state (FSMContext): –û–±—ä–µ–∫—Ç FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.

    Returns:
        None
    """
    try:
        for remaining in range(seconds, 0, -1):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
            try:
                msg = await message.bot.edit_message_text(
                    text=f"–û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥.",
                    chat_id=chat_id,
                    message_id=message_id,
                )
                await rq.set_message(user_id, msg.message_id, msg.text)
                await asyncio.sleep(1)
                await rq.delete_certain_message_from_db(msg.message_id)
            except Exception as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e} <run_timer_for_waiting>"
                )
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

        msg = await message.bot.edit_message_text(
            text="–ü–ª–∞—Ç–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!", chat_id=chat_id, message_id=message_id
        )

        await asyncio.sleep(3)
        await rq.form_new_price_order(order_id, 20)
        await rq.delete_certain_message_from_db(msg.message_id)

        new_seconds = 57  # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 60 —Å–µ–∫—É–Ω–¥

        task = asyncio.create_task(
            run_timer_for_waiting(
                user_id, order_id, message, chat_id, message_id, new_seconds, state
            )
        )

        await state.update_data(task=task)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e} <run_timer_for_waiting>"
        )


def is_valid_name(name: str) -> bool:
    return bool(re.match(r"^[–ê-–Ø–Å][–∞-—è—ë]+$", name))


def is_valid_phone(phone: str) -> bool:
    return bool(re.match(r"^\+?\d{10,15}$", phone))


def is_valid_car_number(car_number: str) -> bool:
    pattern = r"^[–ê-–Ø–∞-—è–Å—ë]{1}[0-9]{3}[–ê-–Ø–∞-—è–Å—ë]{2}[0-9]{2,3}$"
    return bool(re.match(pattern, car_number))


def is_valid_submission_time(submission_time: str) -> bool:
    pattern = r"^([01][0-9]|2[0-3]):[0-5][0-9]$"
    return bool(re.match(pattern, submission_time))


def escape_markdown(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


async def extract_order_number(order_info: str) -> int:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    match = re.search(r"‚Ññ(\d+)", order_info, re.IGNORECASE)
    if match:
        return int(match.group(1))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    return None


async def extract_numbers_from_string(s):
    return re.findall(r"\d+", s)


async def extract_time(time_string, with_add_time: bool = True):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–æ—Ä–º —Å–ª–æ–≤–∞ "—á–∞—Å"
    pattern = r"(?:(\d+)\s*—á–∞—Å[–∞–æ–≤]?|\b(\d+)\s*–º–∏–Ω\b)"

    hours = 0
    minutes = 0

    # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
    matches = re.findall(pattern, time_string)

    for match in matches:
        hour_match, minute_match = match
        if hour_match:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —á–∞—Å—ã
            hours += int(hour_match)
        if minute_match:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –º–∏–Ω—É—Ç—ã
            if with_add_time:
                minutes += int(minute_match) + 3
            else:
                minutes += int(minute_match)

    return hours, minutes


async def send_order_message(
    order_id: int,
    submission_time: str,
    start: str,
    finish: str,
    distance: str,
    time: str,
    price: int,
    comment: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"‚ÄºÔ∏è–ü–†–ï–î–ó–ê–ö–ê–ó‚ÄºÔ∏è\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüóì–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüóì–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    return message


async def send_long_order_message(
    order_id: int,
    submission_time: str,
    start: str,
    rate: str,
    comment: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"‚ÄºÔ∏è–ü–†–ï–î–ó–ê–ö–ê–ó‚ÄºÔ∏è\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüóì–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüóì–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    return message


async def send_order_message_for_client(
    order_id: int,
    submission_time: str,
    status: str,
    start: str,
    finish: str,
    distance: str,
    time: str,
    price: int,
    comment: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"–ü–†–ï–î–ó–ê–ö–ê–ó\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüìç–ö—É–¥–∞: {finish}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüìç–ö—É–¥–∞: {finish}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    return message


async def send_long_order_message_for_client(
    order_id: int,
    submission_time: str,
    status: str,
    start: str,
    rate: str,
    comment: str,
    preorder_flag=False,
) -> str:
    if preorder_flag:
        message = f"–ü–†–ï–î–ó–ê–ö–ê–ó\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    return message


async def send_order_message_for_client_with_driver(
    driver_info: str,
    order_id: int,
    submission_time: str,
    status: str,
    start: str,
    finish: str,
    distance: str,
    time: str,
    price: int,
    comment: str,
    driver_username: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"–ü–†–ï–î–ó–ê–ö–ê–ó\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º: @{driver_username}\n{driver_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º: @{driver_username}\n{driver_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    return message


async def send_long_order_message_for_client_with_driver(
    driver_info: str,
    order_id: int,
    submission_time: str,
    status: str,
    start: str,
    rate: str,
    comment: str,
    driver_username: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"–ü–†–ï–î–ó–ê–ö–ê–ó\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º: @{driver_username}\n{driver_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º: @{driver_username}\n{driver_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    return message


async def send_order_message_for_driver(
    client_info: str,
    order_id: int,
    submission_time: str,
    status: str,
    start: str,
    finish: str,
    distance: str,
    time: str,
    price: int,
    comment: str,
    client_username: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"–ü–†–ï–î–ó–ê–ö–ê–ó\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: @{client_username}\n{client_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: @{client_username}\n{client_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    return message


async def send_long_order_message_for_driver(
    client_info: str,
    order_id: int,
    submission_time: str,
    status: str,
    start: str,
    rate: str,
    comment: str,
    client_username: str,
    preorder_flag: bool = False,
) -> str:
    if preorder_flag:
        message = f"–ü–†–ï–î–ó–ê–ö–ê–ó\n\n–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: @{client_username}\n{client_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    else:
        message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüïë–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {submission_time}\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìû–î–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: @{client_username}\n{client_info}\n\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    return message


async def order_history(
    client_info: str,
    driver_info: str,
    data: str,
    order_id: int,
    status: str,
    start: str,
    finish: str,
    distance: str,
    time: str,
    price: int,
    comment: str,
) -> str:
    message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìÖ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {data}\n----\nüë§–ò–Ω—Ñ. –æ –≤–æ–¥–∏—Ç–µ–ª–µ:\n{driver_info}\n\nüë§–ò–Ω—Ñ. –æ –∫–ª–∏–µ–Ω—Ç–µ:\n{client_info}\n----\nüìç–û—Ç–∫—É–¥–∞: {start}\nüìç–ö—É–¥–∞: {finish}\nüìç–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}\nüïë–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ~ {time}\nüí∞–¶–µ–Ω–∞: {price}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    return message


async def long_order_history(
    client_info: str,
    driver_info: str,
    data: str,
    order_id: int,
    status: str,
    start: str,
    rate: str,
    comment: str,
) -> str:
    message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ü–û–ö–ê–¢–ê–¢–¨–°–Ø\n\nüí•–°—Ç–∞—Ç—É—Å: {status}\n\nüìÖ–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: {data}\n----\nüë§–ò–Ω—Ñ. –æ –≤–æ–¥–∏—Ç–µ–ª–µ:\n{driver_info}\n\nüë§–ò–Ω—Ñ. –æ –∫–ª–∏–µ–Ω—Ç–µ:\n{client_info}\n----\nüìç–û—Ç–∫—É–¥–∞: {start}\nüöó–¢–∞—Ä–∏—Ñ: {rate}\n\nüìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    return message


async def get_order_info(rate_id: int, order) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç rate_id.

    :param rate_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ (1, 2, 4, 5).
    :param order: –û–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏.
    :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ rate_id –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
    """
    order_handlers = {
        1: (send_order_message, False),
        2: (send_long_order_message, False),
        4: (send_order_message, True),
        5: (send_long_order_message, True),
    }

    handler, flag = order_handlers.get(rate_id, (None, None))
    if handler is None:
        return None

    encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
    if not encryption_key:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_info>")
        return None

    # –î–µ—à–∏—Ñ—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    decrypted_start = sup.decrypt_data(order.start, encryption_key)

    try:
        if handler == send_order_message:
            decrypted_finish = sup.decrypt_data(order.finish, encryption_key)
            order_info = await handler(
                order.id,
                order.submission_time,
                decrypted_start,
                decrypted_finish,
                order.distance,
                order.trip_time,
                order.price,
                order.comment,
                flag,
            )
        else:
            order_info = await handler(
                order.id,
                order.submission_time,
                decrypted_start,
                order.finish,
                order.comment,
                flag,
            )
        return order_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {e} <get_order_info>")
        return None


async def get_order_info_for_client(
    rate_id: int,
    submission_time: str,
    order_id: int,
    order_start: str,
    order_finish: str,
    order_comment: str,
    order_status: str,
    order_price: int,
    order_distance: str,
    order_time: str,
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.

    Args:
        rate_id (int): ID —Ç–∞—Ä–∏—Ñ–∞ (1 –∏–ª–∏ 2).
        order_id (int): ID –∑–∞–∫–∞–∑–∞.
        order_start (str): –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_finish (str): –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_comment (str): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É.
        order_status (str): –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
        order_price (int): –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞.
        order_distance (str): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_time (str): –í—Ä–µ–º—è –≤ –ø—É—Ç–∏.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
        None: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
    """
    valid_order_statuses = {"–ø—Ä–∏–Ω—è—Ç"}

    if order_status in valid_order_statuses:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        try:

            encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_info_for_client>"
                )
                return None

            decrypted_start = sup.decrypt_data(order_start, encryption_key)

            if rate_id in [1, 4]:
                decrypted_finish = sup.decrypt_data(order_finish, encryption_key)

                if rate_id == 1:
                    return await send_order_message_for_client(
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        decrypted_finish,
                        order_distance,
                        order_time,
                        order_price,
                        order_comment,
                    )
                else:
                    return await send_order_message_for_client(
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        decrypted_finish,
                        order_distance,
                        order_time,
                        order_price,
                        order_comment,
                        True,
                    )
            elif rate_id in [2, 5]:
                if rate_id == 2:
                    return await send_long_order_message_for_client(
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        order_finish,
                        order_comment,
                    )
                else:
                    return await send_long_order_message_for_client(
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        order_finish,
                        order_comment,
                        True,
                    )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order_id}: {e} <get_order_info_for_client>"
            )
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º


async def get_order_info_for_client_with_driver(
    rate_id: int,
    submission_time: str,
    order_id: int,
    order_start: str,
    order_finish: str,
    order_comment: str,
    order_status: str,
    order_price: int,
    order_distance: str,
    order_time: str,
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ (–µ—Å–ª–∏ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω).

    Args:
        rate_id (int): ID —Ç–∞—Ä–∏—Ñ–∞ (1 –∏–ª–∏ 2).
        order_id (int): ID –∑–∞–∫–∞–∑–∞.
        order_start (str): –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_finish (str): –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_comment (str): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É.
        order_status (str): –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
        order_price (int): –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞.
        order_distance (str): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_time (str): –í—Ä–µ–º—è –≤ –ø—É—Ç–∏.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–¥–∏—Ç–µ–ª–µ.
        None: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
    """
    valid_order_statuses = {
        "—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è",
        "–≤–æ–¥–∏—Ç–µ–ª—å –≤ –ø—É—Ç–∏",
        "–≤ –ø—É—Ç–∏",
        "–æ–ø–ª–∞—Ç–∞",
        "–Ω–∞ –º–µ—Å—Ç–µ",
        "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è",
        "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞",
        "–ø—Ä–µ–¥–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
        "–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
        "–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ",
    }

    if order_status in valid_order_statuses:
        try:
            driver_id = await rq.get_latest_driver_id_by_order_id(order_id)
            if driver_id is None:
                logger.error(
                    f"–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} <get_order_info_for_client_with_driver>"
                )
                return None

            user_driver = await rq.get_user_by_driver(driver_id)
            if user_driver is None:
                logger.error(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –∏ –∑–∞–∫–∞–∑–∞ {order_id} <get_order_info_for_client_with_driver>"
                )
                return None

            driver_info = await rq.get_driver_info(driver_id, True)
            if driver_info is None:
                logger.error(
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –∏ –∑–∞–∫–∞–∑–∞ {order_id} <get_order_info_for_client_with_driver>"
                )
                return None

            encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_info_for_client_with_driver>"
                )
                return None

            decrypted_start = sup.decrypt_data(order_start, encryption_key)

            if rate_id in [1, 4]:
                decrypted_finish = sup.decrypt_data(order_finish, encryption_key)

                if rate_id == 1:
                    return await send_order_message_for_client_with_driver(
                        driver_info["text"],
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        decrypted_finish,
                        order_distance,
                        order_time,
                        order_price,
                        order_comment,
                        user_driver.username,
                    )
                else:
                    return await send_order_message_for_client_with_driver(
                        driver_info["text"],
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        decrypted_finish,
                        order_distance,
                        order_time,
                        order_price,
                        order_comment,
                        user_driver.username,
                        True,
                    )
            elif rate_id in [2, 5]:
                if rate_id == 2:
                    return await send_long_order_message_for_client_with_driver(
                        driver_info["text"],
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        order_finish,
                        order_comment,
                        user_driver.username,
                    )
                else:
                    return await send_long_order_message_for_client_with_driver(
                        driver_info["text"],
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        order_finish,
                        order_comment,
                        user_driver.username,
                        True,
                    )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order_id}: {e} <get_order_info_for_client_with_driver>"
            )
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º


async def get_order_info_for_driver(
    rate_id: int,
    submission_time: str,
    order_id: int,
    order_start: str,
    order_finish: str,
    order_comment: str,
    order_status: str,
    order_price: int,
    order_distance: str,
    order_time: str,
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ.

    Args:
        rate_id (int): ID —Ç–∞—Ä–∏—Ñ–∞ (1 –∏–ª–∏ 2).
        order_id (int): ID –∑–∞–∫–∞–∑–∞.
        order_start (str): –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_finish (str): –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_comment (str): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É.
        order_status (str): –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
        order_price (int): –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞.
        order_distance (str): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_time (str): –í—Ä–µ–º—è –≤ –ø—É—Ç–∏.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ.
        None: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
    """
    valid_order_statuses = {
        "—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è",
        "–≤–æ–¥–∏—Ç–µ–ª—å –≤ –ø—É—Ç–∏",
        "–≤ –ø—É—Ç–∏",
        "–æ–ø–ª–∞—Ç–∞",
        "–Ω–∞ –º–µ—Å—Ç–µ",
        "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è",
        "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∫–ª–∏–µ–Ω—Ç–∞",
        "–ø—Ä–µ–¥–∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç",
    }

    if order_status in valid_order_statuses:
        try:
            client_id = await rq.get_client_by_order(order_id)
            if client_id is None:
                logger.error(
                    f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} <get_order_info_for_driver>"
                )
                return None

            user_client = await rq.get_user_by_client_id(client_id)
            if user_client is None:
                logger.error(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏ –∑–∞–∫–∞–∑–∞ {order_id} <get_order_info_for_driver>"
                )
                return None

            client_info = await rq.get_client_info(client_id, True)
            if client_info is None:
                logger.error(
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏ –∑–∞–∫–∞–∑–∞ {order_id} <get_order_info_for_driver>"
                )
                return None

            encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
            if not encryption_key:
                logger.error(
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_info_for_driver>"
                )
                return None

            decrypted_start = sup.decrypt_data(order_start, encryption_key)

            if rate_id in [1, 4]:
                decrypted_finish = sup.decrypt_data(order_finish, encryption_key)

                if rate_id == 1:
                    return await send_order_message_for_driver(
                        client_info,
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        decrypted_finish,
                        order_distance,
                        order_time,
                        order_price,
                        order_comment,
                        user_client.username,
                    )
                else:
                    return await send_order_message_for_driver(
                        client_info,
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        decrypted_finish,
                        order_distance,
                        order_time,
                        order_price,
                        order_comment,
                        user_client.username,
                        True,
                    )
            elif rate_id in [2, 5]:
                if rate_id == 2:
                    return await send_long_order_message_for_driver(
                        client_info,
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        order_finish,
                        order_comment,
                        user_client.username,
                    )
                else:
                    return await send_long_order_message_for_driver(
                        client_info,
                        order_id,
                        submission_time,
                        order_status,
                        decrypted_start,
                        order_finish,
                        order_comment,
                        user_client.username,
                        True,
                    )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order_id}: {e} <get_order_info_for_driver>"
            )
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º


async def get_order_history(
    order_history_id: int,
    client_id: int,
    driver_id: int,
    rate_id: int,
    order_id: int,
    order_start: str,
    order_finish: str,
    order_comment: str,
    order_status: str,
    order_price: int,
    order_distance: str,
    order_time: str,
) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        order_history_id (int): ID –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.
        client_id (int): ID –∫–ª–∏–µ–Ω—Ç–∞.
        driver_id (int): ID –≤–æ–¥–∏—Ç–µ–ª—è.
        rate_id (int): ID —Ç–∞—Ä–∏—Ñ–∞.
        order_id (int): ID –∑–∞–∫–∞–∑–∞.
        order_start (str): –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_finish (str): –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_comment (str): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É.
        order_status (str): –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
        order_price (int): –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞.
        order_distance (str): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞.
        order_time (str): –í—Ä–µ–º—è –≤ –ø—É—Ç–∏.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞.
        None: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –≤–æ–¥–∏—Ç–µ–ª–µ
        client_info = await rq.get_client_info(client_id, True)
        if client_info is None:
            logger.error(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è client_id {client_id} –∏ order_id {order_id} <get_order_history>"
            )
            return None

        driver_info_dict = await rq.get_driver_info(driver_id, True)
        if not driver_info_dict:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
            driver_info = None
            logger.warning(
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ —Å id {driver_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        else:
            driver_info = driver_info_dict["text"]

        data = await rq.get_order_data(order_history_id)
        if data is None:
            logger.error(
                f"–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è order_history_id {order_history_id} –∏ order_id {order_id} <get_order_history>"
            )
            return None

        encryption_key = os.getenv("DATA_ENCRYPTION_KEY")
        if not encryption_key:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. <get_order_history>")
            return None

        decrypted_start = sup.decrypt_data(order_start, encryption_key)

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç rate_id –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if rate_id in [1, 4]:
            decrypted_finish = sup.decrypt_data(order_finish, encryption_key)

            return await order_history(
                client_info,
                driver_info,
                data,
                order_id,
                order_status,
                decrypted_start,
                decrypted_finish,
                order_distance,
                order_time,
                order_price,
                order_comment,
            )
        elif rate_id in [2, 5]:
            return await long_order_history(
                client_info,
                driver_info,
                data,
                order_id,
                order_status,
                decrypted_start,
                order_finish,
                order_comment,
            )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ {order_id} –¥–ª—è client_id {client_id}: {e} <get_order_history>"
        )
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º


async def get_address(location_info):
    if isinstance(location_info, dict):
        latitude = location_info.get("latitude")
        longitude = location_info.get("longitude")
        return await search_location(latitude, longitude)
    elif isinstance(location_info, str):
        return location_info
    return None


async def search_location(latitude: float, longitude: float) -> str:
    api_token = os.getenv("DADATA_API_TOKEN")
    if api_token is None:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á API (DADATA_API_TOKEN) <geocode_address>")
        return

    url = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/geolocate/address"
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Token {api_token}",
    }
    data = {
        "lat": latitude,
        "lon": longitude,
        "count": 1,  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                result = await response.json()
                if result and result["suggestions"]:
                    address = result["suggestions"][0]["data"]
                    street = address.get("street", "")
                    house_number = address.get("house", "")

                    if street and house_number:
                        full_address = f"{street} {house_number}".strip()
                    elif street:
                        full_address = street.strip()
                    else:
                        full_address = "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

                    return full_address
                else:
                    return "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: —Å—Ç–∞—Ç—É—Å {response.status}"


async def geocode_address(address: str) -> tuple[str, str]:
    async with aiohttp.ClientSession() as session:
        api_token = os.getenv("DADATA_API_TOKEN")
        if api_token is None:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á API (DADATA_API_TOKEN) <geocode_address>")
            return

        secret_token = os.getenv("DADATA_SECRET_TOKEN")
        if secret_token is None:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á API (DADATA_SECRET_TOKEN) <geocode_address>")
            return

        url = "https://cleaner.dadata.ru/api/v1/clean/address"
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": f"Token {api_token}",
            "X-Secret": secret_token,
        }
        data = [address]

        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                result = await response.json()
                if result:
                    latitude = result[0].get("geo_lat", "N/A")
                    longitude = result[0].get("geo_lon", "N/A")
                    street = result[0].get("street_with_type", "N/A")
                    if street is None:
                        street = result[0].get("settlement_with_type", "N/A")

                    house_number = result[0].get("house", "N/A")
                    house_number = house_number if house_number != None else "-"

                    city = result[0].get("city", "N/A")
                    city = city if city != None else "-"

                    if street == None:
                        return_info = ("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    else:
                        return_info = (
                            f"{latitude},{longitude}",
                            f"{street}, {house_number}, {city}",
                        )
                else:
                    return_info = ("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                return return_info
            else:
                return (
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.",
                )


async def send_route(start_coords: str, end_coords: str):
    graphhopper_key = os.getenv("GRAPHHOPPER_API_KEY")
    if graphhopper_key is None:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á API (GRAPHHOPPER_API_KEY) <send_route>")
        return

    params = {
        "point": [start_coords, end_coords],
        "key": graphhopper_key,
        "vehicle": "car",
        "locale": "en",
        "traffic": "true",  # –í–∫–ª—é—á–∞–µ–º —É—á–µ—Ç –ø—Ä–æ–±–æ–∫
        "date": int(
            datetime.now(pytz.timezone("Etc/GMT-7")).timestamp() * 1000
        ),  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    }

    url = "https://graphhopper.com/api/1/route"

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()

                if data.get("paths"):
                    distance_meters = data["paths"][0].get("distance", 0)

                    kilometers = math.ceil(distance_meters // 1000)  # –ü–æ–ª–Ω—ã–µ –∫–∏–ª–æ–º–µ—Ç—Ä—ã

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    if distance_meters < 0:
                        total_distance = f"{math.ceil(distance_meters)} –º"
                    else:
                        meters = math.ceil(distance_meters % 1000)  # –û—Å—Ç–∞—Ç–æ–∫ –≤ –º–µ—Ç—Ä–∞—Ö
                        if kilometers > 0:
                            total_distance = f"{kilometers} –∫–º, {meters} –º"
                        else:
                            total_distance = f"{meters} –º"

                    total_time_milliseconds = data["paths"][0].get("time", 0)
                    total_time_minutes = math.ceil(total_time_milliseconds / 60000)

                    hours = total_time_minutes // 60
                    minutes = total_time_minutes % 60

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —Å–∫–ª–æ–Ω–µ–Ω–∏–π
                    if hours > 0:
                        if hours == 1:
                            total_time = f"{hours} —á–∞—Å, {minutes} –º–∏–Ω"
                        elif hours in [2, 3, 4]:
                            total_time = f"{hours} —á–∞—Å–∞, {minutes} –º–∏–Ω"
                        else:
                            total_time = f"{hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω"
                    else:
                        total_time = f"{minutes} –º–∏–Ω"

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    price = 0
                    if kilometers < 7:
                        price = 700
                    elif kilometers > 7:
                        price = kilometers * 100

                    return total_distance, total_time, price
                else:
                    return None, None, "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã."
            else:
                return (
                    None,
                    None,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: —Å—Ç–∞—Ç—É—Å {response.status}.",
                )


async def calculate_time_diff(order_submission_time, timezone="Etc/GMT-7"):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–∫–∞–∑–∞.

    :param order_submission_time: –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "%d-%m %H:%M".
    :param timezone: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    :return: –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏.
    """

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        current_time = datetime.now(pytz.timezone(timezone))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime, –¥–æ–±–∞–≤–∏–≤ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        year = current_time.year
        day_month = order_submission_time.split()[0]
        submission_time = order_submission_time.split()[1]
        exact_time_preorder_str = f"{day_month}-{year} {submission_time}"
        exact_time_preorder = datetime.strptime(
            exact_time_preorder_str, "%d-%m-%Y %H:%M"
        )
        exact_time_preorder = exact_time_preorder.replace(
            tzinfo=pytz.timezone(timezone)
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        diff_time = exact_time_preorder - current_time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–æ—à–ª–æ–º
        if diff_time.total_seconds() < 0:
            logger.warning(f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ {order_submission_time} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º")

        return diff_time
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None


async def calculate_new_time_by_current_time(
    total_time: str, with_add_time: bool = True
):
    now = datetime.now(pytz.timezone("Etc/GMT-7"))

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
    hours_to_add, minutes_to_add = await extract_time(total_time, with_add_time)

    # –°–æ–∑–¥–∞–µ–º timedelta –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    time_to_add = timedelta(hours=hours_to_add, minutes=minutes_to_add)

    # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    new_time = now + time_to_add

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
    new_time_formatted = new_time.strftime("%d-%m-%Y %H:%M")

    return new_time_formatted


async def calculate_new_time_by_scheduled_time(scheduled_time: str, total_time: str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –æ–±—ä–µ–∫—Ç datetime
    now = datetime.strptime(scheduled_time, "%d-%m-%Y %H:%M")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
    hours_to_add, minutes_to_add = await extract_time(total_time)

    # –°–æ–∑–¥–∞–µ–º timedelta –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    time_to_add = timedelta(hours=hours_to_add, minutes=minutes_to_add)

    # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    new_time = now + time_to_add

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"
    new_time_formatted = new_time.strftime("%d-%m-%Y %H:%M")

    return new_time_formatted


async def wilson_score_interval(
    ratings_count: int, ratings_sum: int, confidence_level: float = 0.95
):
    if ratings_count == 0:
        return (0.0, 0.0)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–±–æ—Ä–æ—á–Ω—É—é –¥–æ–ª—é
    p_hat = ratings_sum / (ratings_count * 5)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É (5)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º z-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
    z = norm.ppf(1 - (1 - confidence_level) / 2)

    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    denominator = 1 + (z**2 / ratings_count)
    centre_adjusted_probability = p_hat + (z**2 / (2 * ratings_count))

    adjusted_se = math.sqrt(
        (p_hat * (1 - p_hat) + (z**2 / (4 * ratings_count))) / ratings_count
    )

    lower_bound = (centre_adjusted_probability - z * adjusted_se) / denominator
    upper_bound = (centre_adjusted_probability + z * adjusted_se) / denominator

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É –æ—Ç 0 –¥–æ 1
    lower_bound = max(0, lower_bound)
    upper_bound = min(1, upper_bound)

    result = (lower_bound * 5, upper_bound * 5)

    return result


async def save_image_as_encrypted(image_data: bytes, user_id: int) -> str | None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    Args:
        image_data: –ë–∞–π—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞).

    Returns:
        –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        unique_id = uuid.uuid4()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        encryption_key = os.getenv("IMAGE_ENCRYPTION_KEY")
        if not encryption_key:
            logger.error(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (IMAGE_ENCRYPTION_KEY) <save_image_as_encrypted>"
            )
            return None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fernet —Å –∫–ª—é—á–æ–º
        cipher = Fernet(encryption_key.encode())
        encrypted_data = cipher.encrypt(image_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º UUID –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .enc –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        filename = f"{unique_id}.jpg.enc"

        # Get the directory from the environment variable
        encrypted_image_dir = os.getenv("ENCRYPTED_IMAGE_DIR")
        if not encrypted_image_dir:
            logger.error(
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (ENCRYPTED_IMAGE_DIR) <save_image_as_encrypted>"
            )
            return None

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(encrypted_image_dir, exist_ok=True)

        filepath = os.path.join(encrypted_image_dir, filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async with aiofiles.open(filepath, "wb") as out_file:
            await out_file.write(encrypted_data)

        return filename  # Return only the filename

    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} <save_image_as_encrypted>"
        )
        return None


def generate_unique_key():
    return str(uuid.uuid4())


def hash_doc():
    try:
        # –ß–∏—Ç–∞–µ–º PDF-—Ñ–∞–π–ª
        base_dir = os.getcwd()
        file_path = os.path.join(base_dir, "privacy_policy", "privacy_policy.pdf")

        reader = PdfReader(file_path)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
        
        if not text:
            logger.warning("PDF-—Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")
            return None
        
        doc_hash = hashlib.sha256(text.encode('utf-8')).hexdigest()
        return doc_hash

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e} <hash_doc>")
        return None


def encrypt_data(data, key):
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cipher_suite = Fernet(key.encode())
        return cipher_suite.encrypt(data.encode()).decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e} <encrypt_data>")


def decrypt_data(encrypted_data, key):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        cipher_suite = Fernet(key.encode())
        return cipher_suite.decrypt(encrypted_data).decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e} <decrypt_data>")
